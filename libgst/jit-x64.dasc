#include "gstpriv.h"
#include "match.h"

#include "dynasm/dasm_proto.h"
#include "dynasm/dasm_x86.h"

static void compile(OOP compiled_code_oop);

void compile(OOP compiled_code_oop) {

  if (!is_a_kind_of (OOP_CLASS (compiled_code_oop), _gst_compiled_method_class) &&
      OOP_CLASS (compiled_code_oop) != _gst_compiled_block_class) {
    return ;
  }

  /* TODO: Compiled Block!!! */
  /* if (OOP_CLASS (methodOOP) == _gst_compiled_block_class) */
  /*   { */
  /*     block_header header; */
  /*     header = GET_BLOCK_HEADER (methodOOP); */

  /*     /\* If we're verifying a block but not from a nested call, */
  /*        restart from the top-level method.  *\/ */
  /*     if (header.clean != 0 && depth == 0) */
  /*       return _gst_verify_method (GET_BLOCK_METHOD (methodOOP), NULL, 0); */

  /*     num_temps = header.numArgs + header.numTemps; */
  /*     stack_depth = header.depth << DEPTH_SCALE; */
  /*   } */

  dasm_State* dasm_state;
  uint16_t npc = 8;

  gst_uchar *bytecode;
  method_header header;
  OOP *literals;
  int num_literals;
  int num_temps;
  int stack_depth;

  bytecode = GET_METHOD_BYTECODES (compiled_code_oop);
  literals = GET_METHOD_LITERALS (compiled_code_oop);
  num_literals = NUM_METHOD_LITERALS (compiled_code_oop);

  header = GET_METHOD_HEADER (compiled_code_oop);
  num_temps = header.numArgs + header.numTemps;
  stack_depth = header.stack_depth << DEPTH_SCALE;
  switch (header.headerFlag)
    {
    case MTH_NORMAL:
    case MTH_PRIMITIVE:
    case MTH_ANNOTATED:
    case MTH_UNUSED:
      break;

    case MTH_USER_DEFINED:
      break;

    case MTH_RETURN_SELF:
      break;

    case MTH_RETURN_INSTVAR:
      break;

    case MTH_RETURN_LITERAL:
      break;
    }\

  |.if X64
  |.arch x64
  |.else
  |.arch x86
  |.endif
  |.section code
  dasm_init(&dasm_state, DASM_MAXSECTION);
  |.globals lbl_
  void* labels[lbl__MAX];
  dasm_setupglobal(&dasm_state, labels, lbl__MAX);
  |.actionlist code_actions
  dasm_setup(&dasm_state, code_actions);
  dasm_growpc(&dasm_state, npc);
  dasm_State** Dst = &dasm_state;
  |.code
  |->bf_main:
  | mov eax, 0
  | ret

#define MATCH_BYTECODES_JIT                                             \
  MATCH_BYTECODES_JIT_PUSH_RECEIVER_VARIABLE: {                         \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_PUSH_TEMPORARY_VARIABLE: {                         \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_PUSH_LIT_CONSTANT: {                               \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_PUSH_LIT_VARIABLE: {                               \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_PUSH_SELF: {                                       \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_PUSH_SPECIAL: {                                    \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_PUSH_INTEGER: {                                    \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_RETURN_METHOD_STACK_TOP: {                         \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_RETURN_CONTEXT_STACK_TOP: {                        \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_LINE_NUMBER_BYTECODE: {                            \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_STORE_RECEIVER_VARIABLE: {                         \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_STORE_TEMPORARY_VARIABLE: {                        \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_STORE_LIT_VARIABLE: {                              \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_SEND: {                                            \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_POP_INTO_NEW_STACKTOP: {                           \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_POP_STACK_TOP: {                                   \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_DUP_STACK_TOP: {                                   \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_PUSH_OUTER_TEMP: {                                 \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_STORE_OUTER_TEMP: {                                \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_EXIT_INTERPRETER: {                                \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_JUMP: {                                            \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_POP_JUMP_TRUE: {                                   \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_POP_JUMP_FALSE: {                                  \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_SEND_ARITH: {                                      \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_SEND_SPECIAL: {                                    \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_MAKE_DIRTY_BLOCK: {                                \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_SEND_IMMEDIATE: {                                  \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;                                      \
 MATCH_BYTECODES_JIT_INVALID: {                                         \
  }                                                                     \
  goto MATCH_BYTECODES_SWITCH_JIT;

  MATCH_BYTECODES (JIT, bytecode, ());

}

