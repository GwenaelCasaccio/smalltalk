/* Automatically generated by genvm, do not edit!  */
#define SEND_TO_SUPER(sendSelector, sendArgs, methodClass)                     \
  _gst_send_message_internal(sendSelector, sendArgs, _gst_self[local_cpy_current_thread_id], methodClass)

#if REG_AVAILABILITY >= 2 && defined(LOCAL_REGS)
#define RECEIVER_VARIABLE(index) INSTANCE_VARIABLE(self_cache, index)
#define METHOD_TEMPORARY(index) temp_cache[index]
#define METHOD_LITERAL(index) lit_cache[index]
#define STORE_RECEIVER_VARIABLE(index, oop)                                    \
  STORE_INSTANCE_VARIABLE(self_cache, index, oop)
#define STORE_METHOD_TEMPORARY(index, oop) temp_cache[index] = (oop)
#define STORE_METHOD_LITERAL(index, oop) lit_cache[index] = (oop)
#else
#define RECEIVER_VARIABLE(index) INSTANCE_VARIABLE(_gst_self[local_cpy_current_thread_id], index)
#define METHOD_TEMPORARY(index) _gst_temporaries[local_cpy_current_thread_id][index]
#define METHOD_LITERAL(index) _gst_literals[local_cpy_current_thread_id][index]
#define STORE_RECEIVER_VARIABLE(index, oop)                                    \
  STORE_INSTANCE_VARIABLE(_gst_self[local_cpy_current_thread_id], index, oop)
#define STORE_METHOD_TEMPORARY(index, oop) _gst_temporaries[local_cpy_current_thread_id][index] = (oop)
#define STORE_METHOD_LITERAL(index, oop) _gst_literals[local_cpy_current_thread_id][index] = (oop)
#endif

#ifndef OPEN_CODE_MATH

#define RAW_INT_OP(op, op1, op2, iop)
#define RAW_FLOATD_OP(op, op1, op2, fop)
#define INTERP_BASIC_OP(op, op1, op2, iop, fop)
#define INTERP_BASIC_BOOL(op, op1, op2, operator)

#else

#define RAW_INT_OP(op, op1, op2, iop)                                          \
  {                                                                            \
    mst_Boolean overflow;                                                      \
    OOP result = iop;                                                          \
    if (COMMON(!overflow)) {                                                   \
      op = result;                                                             \
      break;                                                                   \
    }                                                                          \
  }

#define RAW_FLOATD_OP(op, op1, op2, fop)                                       \
  {                                                                            \
    double farg1, farg2;                                                       \
    farg1 = IS_INT(op1) ? TO_INT(op1) : FLOATD_OOP_VALUE(op1);                 \
    farg2 = IS_INT(op2) ? TO_INT(op2) : FLOATD_OOP_VALUE(op2);                 \
    EXPORT_REGS();                                                             \
    op = floatd_new(fop);                                                      \
    IMPORT_REGS();                                                             \
    break;                                                                     \
  }

#define INTERP_BASIC_OP(op, op1, op2, iop, fop)                                \
  {                                                                            \
    if COMMON (ARE_INTS(op1, op2)) {                                           \
      RAW_INT_OP(op, op1, op2, iop);                                           \
    } else if COMMON ((IS_INT(op1) || OOP_CLASS(op1) == _gst_floatd_class) &&  \
                      (IS_INT(op2) || OOP_CLASS(op2) == _gst_floatd_class))    \
      RAW_FLOATD_OP(op, op1, op2, fop);                                        \
  }

#define INTERP_BASIC_BOOL(op, op1, op2, operator)                              \
  {                                                                            \
    if COMMON (ARE_INTS(op1, op2)) {                                           \
      VM_POP_N_OOPS(2);                                                           \
      if (((intptr_t)op1) operator((intptr_t)op2))                             \
        DISPATCH(true_byte_codes);                                             \
      else                                                                     \
        DISPATCH(false_byte_codes);                                            \
    } else if COMMON ((IS_INT(op1) || OOP_CLASS(op1) == _gst_floatd_class) &&  \
                      (IS_INT(op2) || OOP_CLASS(op2) == _gst_floatd_class)) {  \
      double farg1 = IS_INT(op1) ? TO_INT(op1) : FLOATD_OOP_VALUE(op1);        \
      double farg2 = IS_INT(op2) ? TO_INT(op2) : FLOATD_OOP_VALUE(op2);        \
      VM_POP_N_OOPS(2);                                                           \
      if (farg1 operator farg2)                                                \
        DISPATCH(true_byte_codes);                                             \
      else                                                                     \
        DISPATCH(false_byte_codes);                                            \
    }                                                                          \
  }
#endif

#ifdef PIPELINING
#define FETCH                                                                  \
  goto *(t = dispatch_vec_per_thread[local_cpy_current_thread_id][*ip], b2 = ip[2], b4 = ip[4], arg = ip[1],           \
         arg2 = ip[3], t2 = dispatch_vec_per_thread[local_cpy_current_thread_id][b2], t)
#define FETCH_VEC(v)                                                           \
  goto *(t = (v)[*ip], b2 = ip[2], b4 = ip[4], arg = ip[1], arg2 = ip[3],      \
         t2 = dispatch_vec_per_thread[local_cpy_current_thread_id][b2], t)

#define PREFETCH                                                               \
  (t = t2, t2 = dispatch_vec_per_thread[local_cpy_current_thread_id][b4], arg2 = ip[3], b2 = b4, b4 = ip[6], ip += 2)
#define PREFETCH_VEC(v)                                                        \
  (t = (v)[b2], t2 = dispatch_vec_per_thread[local_cpy_current_thread_id][b4], arg2 = ip[3], b2 = b4, b4 = ip[6],      \
   ip += 2)

#define NEXT_BC goto *(arg = GET_ARG, t)
#define NEXT_BC_VEC(v) goto *(arg = GET_ARG, t)
#define NEXT_BC_NO_ARG(v) goto *t
#define GET_ARG arg2

#elif REG_AVAILABILITY >= 1
#define FETCH goto *(arg = GET_ARG, dispatch_vec_per_thread[local_cpy_current_thread_id][*ip])
#define FETCH_VEC(v) goto *(arg = GET_ARG, (v)[*ip])
#define PREFETCH (ip += 2, prefetch = dispatch_vec_per_thread[local_cpy_current_thread_id][*ip])
#define PREFETCH_VEC(v) (ip += 2, prefetch = (v)[*ip])
#define NEXT_BC goto *(arg = GET_ARG, prefetch)
#define NEXT_BC_VEC(v) goto *(arg = GET_ARG, prefetch)
#define NEXT_BC_NO_ARG(v) goto *prefetch
#define GET_ARG (ip[1])

#else
#define FETCH NEXT_BC
#define FETCH_VEC(v) NEXT_BC_VEC(v)
#define PREFETCH (ip += 2)
#define PREFETCH_VEC(v) (ip += 2)
#define NEXT_BC goto *(arg = GET_ARG, dispatch_vec_per_thread[local_cpy_current_thread_id][*ip])
#define NEXT_BC_VEC(v) goto *(arg = GET_ARG, (v)[*ip])
#define NEXT_BC_NO_ARG(v) goto *(v)[*ip]
#define GET_ARG (ip[1])
#endif

#define DISPATCH(v) goto *(arg = GET_ARG, (v)[*ip])

static void *monitored_byte_codes[256] = {
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*   0 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*   4 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*   8 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  12 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  16 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  20 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  24 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  28 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  32 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  36 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  40 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  44 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  48 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  52 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  56 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  60 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  64 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  68 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  72 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  76 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  80 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  84 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  88 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  92 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /*  96 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 100 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 104 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 108 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 112 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 116 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 120 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 124 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 128 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 132 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 136 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 140 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 144 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 148 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 152 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 156 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 160 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 164 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 168 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 172 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 176 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 180 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 184 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 188 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 192 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 196 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 200 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 204 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 208 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 212 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 216 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 220 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 224 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 228 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 232 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 236 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 240 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 244 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes, /* 248 */
    &&monitor_byte_codes, &&monitor_byte_codes,
    &&monitor_byte_codes, &&monitor_byte_codes /* 252 */
};

static void *true_byte_codes[256] = {
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*   0 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*   4 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*   8 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*  12 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*  16 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*  20 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*  24 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*  28 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*  32 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*  36 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&bc41,
    &&bc54, /*  40 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*  44 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*  48 */
    &&lookahead_dup_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*  52 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*  56 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*  60 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*  64 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*  68 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*  72 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*  76 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*  80 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*  84 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*  88 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*  92 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /*  96 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 100 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 104 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 108 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 112 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 116 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 120 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 124 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 128 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 132 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 136 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 140 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 144 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 148 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 152 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 156 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 160 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 164 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 168 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 172 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 176 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 180 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 184 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 188 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 192 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 196 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 200 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 204 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 208 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 212 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 216 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 220 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 224 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 228 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 232 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 236 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 240 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 244 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true, /* 248 */
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true,
    &&lookahead_failed_true /* 252 */
};

static void *false_byte_codes[256] = {
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*   0 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*   4 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*   8 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*  12 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*  16 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*  20 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*  24 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*  28 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*  32 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*  36 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&bc54,
    &&bc41, /*  40 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*  44 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*  48 */
    &&lookahead_dup_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*  52 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*  56 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*  60 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*  64 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*  68 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*  72 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*  76 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*  80 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*  84 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*  88 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*  92 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /*  96 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 100 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 104 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 108 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 112 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 116 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 120 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 124 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 128 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 132 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 136 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 140 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 144 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 148 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 152 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 156 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 160 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 164 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 168 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 172 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 176 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 180 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 184 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 188 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 192 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 196 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 200 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 204 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 208 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 212 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 216 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 220 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 224 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 228 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 232 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 236 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 240 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 244 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false, /* 248 */
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false,
    &&lookahead_failed_false /* 252 */
};

static void *normal_byte_codes[256] = {
    &&bc0,   &&bc1,   &&bc2,   &&bc3,   /*   0 */
    &&bc4,   &&bc5,   &&bc6,   &&bc7,   /*   4 */
    &&bc8,   &&bc9,   &&bc10,  &&bc11,  /*   8 */
    &&bc12,  &&bc13,  &&bc14,  &&bc15,  /*  12 */
    &&bc16,  &&bc17,  &&bc18,  &&bc19,  /*  16 */
    &&bc20,  &&bc21,  &&bc22,  &&bc23,  /*  20 */
    &&bc24,  &&bc25,  &&bc26,  &&bc27,  /*  24 */
    &&bc28,  &&bc29,  &&bc30,  &&bc31,  /*  28 */
    &&bc32,  &&bc33,  &&bc34,  &&bc35,  /*  32 */
    &&bc36,  &&bc37,  &&bc38,  &&bc39,  /*  36 */
    &&bc40,  &&bc41,  &&bc42,  &&bc43,  /*  40 */
    &&bc44,  &&bc45,  &&bc46,  &&bc47,  /*  44 */
    &&bc48,  &&bc49,  &&bc50,  &&bc51,  /*  48 */
    &&bc52,  &&bc53,  &&bc54,  &&bc55,  /*  52 */
    &&bc56,  &&bc57,  &&bc58,  &&bc59,  /*  56 */
    &&bc60,  &&bc61,  &&bc62,  &&bc63,  /*  60 */
    &&bc64,  &&bc65,  &&bc66,  &&bc67,  /*  64 */
    &&bc68,  &&bc69,  &&bc70,  &&bc71,  /*  68 */
    &&bc72,  &&bc73,  &&bc74,  &&bc75,  /*  72 */
    &&bc76,  &&bc77,  &&bc78,  &&bc79,  /*  76 */
    &&bc80,  &&bc81,  &&bc82,  &&bc83,  /*  80 */
    &&bc84,  &&bc85,  &&bc86,  &&bc87,  /*  84 */
    &&bc88,  &&bc89,  &&bc90,  &&bc91,  /*  88 */
    &&bc92,  &&bc93,  &&bc94,  &&bc95,  /*  92 */
    &&bc96,  &&bc97,  &&bc98,  &&bc99,  /*  96 */
    &&bc100, &&bc101, &&bc102, &&bc103, /* 100 */
    &&bc104, &&bc105, &&bc106, &&bc107, /* 104 */
    &&bc108, &&bc109, &&bc110, &&bc111, /* 108 */
    &&bc112, &&bc113, &&bc114, &&bc115, /* 112 */
    &&bc116, &&bc117, &&bc118, &&bc119, /* 116 */
    &&bc120, &&bc121, &&bc122, &&bc123, /* 120 */
    &&bc124, &&bc125, &&bc126, &&bc127, /* 124 */
    &&bc128, &&bc129, &&bc130, &&bc131, /* 128 */
    &&bc132, &&bc133, &&bc134, &&bc135, /* 132 */
    &&bc136, &&bc137, &&bc138, &&bc139, /* 136 */
    &&bc140, &&bc141, &&bc142, &&bc143, /* 140 */
    &&bc144, &&bc145, &&bc146, &&bc147, /* 144 */
    &&bc148, &&bc149, &&bc150, &&bc151, /* 148 */
    &&bc152, &&bc153, &&bc154, &&bc155, /* 152 */
    &&bc156, &&bc157, &&bc158, &&bc159, /* 156 */
    &&bc160, &&bc161, &&bc162, &&bc163, /* 160 */
    &&bc164, &&bc165, &&bc166, &&bc167, /* 164 */
    &&bc168, &&bc169, &&bc170, &&bc171, /* 168 */
    &&bc172, &&bc173, &&bc174, &&bc175, /* 172 */
    &&bc176, &&bc177, &&bc178, &&bc179, /* 176 */
    &&bc180, &&bc181, &&bc182, &&bc183, /* 180 */
    &&bc184, &&bc185, &&bc186, &&bc187, /* 184 */
    &&bc188, &&bc189, &&bc190, &&bc191, /* 188 */
    &&bc192, &&bc193, &&bc194, &&bc195, /* 192 */
    &&bc196, &&bc197, &&bc198, &&bc199, /* 196 */
    &&bc200, &&bc201, &&bc202, &&bc203, /* 200 */
    &&bc204, &&bc205, &&bc206, &&bc207, /* 204 */
    &&bc208, &&bc209, &&bc210, &&bc211, /* 208 */
    &&bc212, &&bc213, &&bc214, &&bc215, /* 212 */
    &&bc216, &&bc217, &&bc218, &&bc219, /* 216 */
    &&bc220, &&bc221, &&bc222, &&bc223, /* 220 */
    &&bc224, &&bc225, &&bc226, &&bc227, /* 224 */
    &&bc228, &&bc229, &&bc230, &&bc231, /* 228 */
    &&bc232, &&bc233, &&bc234, &&bc235, /* 232 */
    &&bc236, &&bc237, &&bc238, &&bc239, /* 236 */
    &&bc240, &&bc241, &&bc242, &&bc243, /* 240 */
    &&bc244, &&bc245, &&bc246, &&bc247, /* 244 */
    &&bc248, &&bc249, &&bc250, &&bc251, /* 248 */
    &&bc252, &&bc253, &&bc254, &&bc255  /* 252 */
};

goto jump_around;
bc0 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 402 "vm.inl"
  } while (0);
  /* PLUS_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define op1 _stack1
#define op2 _stack0
#define op _stack1
#line 230 "vm.def"
    INTERP_BASIC_OP(op, op1, op2, add_with_check(op1, op2, &overflow),
                    farg1 + farg2);
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[PLUS_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#line 425 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(1) = _stack1;
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc1 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 449 "vm.inl"
  } while (0);
  /* MINUS_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define op1 _stack1
#define op2 _stack0
#define op _stack1
#line 241 "vm.def"
    INTERP_BASIC_OP(op, op1, op2, sub_with_check(op1, op2, &overflow),
                    farg1 - farg2);
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[MINUS_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#line 472 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(1) = _stack1;
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc2 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 496 "vm.inl"
  } while (0);
  /* LESS_THAN_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define op1 _stack1
#define op2 _stack0
#define op _stack1
#line 252 "vm.def"
    PREPARE_STACK();
    INTERP_BASIC_BOOL(op, op1, op2, <);
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[LESS_THAN_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#line 517 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(1) = _stack1;
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc3 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 541 "vm.inl"
  } while (0);
  /* GREATER_THAN_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define op1 _stack1
#define op2 _stack0
#define op _stack1
#line 261 "vm.def"
    PREPARE_STACK();
    INTERP_BASIC_BOOL(op, op1, op2, >);
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[GREATER_THAN_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#line 562 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(1) = _stack1;
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc4 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 586 "vm.inl"
  } while (0);
  /* LESS_EQUAL_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define op1 _stack1
#define op2 _stack0
#define op _stack1
#line 270 "vm.def"
    PREPARE_STACK();
    INTERP_BASIC_BOOL(op, op1, op2, <=);
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[LESS_EQUAL_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#line 607 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(1) = _stack1;
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc5 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 631 "vm.inl"
  } while (0);
  /* GREATER_EQUAL_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define op1 _stack1
#define op2 _stack0
#define op _stack1
#line 279 "vm.def"
    PREPARE_STACK();
    INTERP_BASIC_BOOL(op, op1, op2, >=);
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[GREATER_EQUAL_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#line 652 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(1) = _stack1;
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc6 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 676 "vm.inl"
  } while (0);
  /* EQUAL_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define op1 _stack1
#define op2 _stack0
#define op _stack1
#line 288 "vm.def"
    PREPARE_STACK();
    INTERP_BASIC_BOOL(op, op1, op2, ==);
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[EQUAL_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#line 697 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(1) = _stack1;
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc7 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 721 "vm.inl"
  } while (0);
  /* NOT_EQUAL_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define op1 _stack1
#define op2 _stack0
#define op _stack1
#line 297 "vm.def"
    PREPARE_STACK();
    INTERP_BASIC_BOOL(op, op1, op2, !=);
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[NOT_EQUAL_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#line 742 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(1) = _stack1;
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc8 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 766 "vm.inl"
  } while (0);
  /* TIMES_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define op1 _stack1
#define op2 _stack0
#define op _stack1
#line 306 "vm.def"
    INTERP_BASIC_OP(op, op1, op2, mul_with_check(op1, op2, &overflow),
                    farg1 * farg2);
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[TIMES_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#line 789 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(1) = _stack1;
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc9 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 813 "vm.inl"
  } while (0);
  /* DIVIDE_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define op1 _stack1
#define op2 _stack0
#define op _stack1
#line 317 "vm.def"
    if COMMON (!ARE_INTS(op1, op2) &&
               (IS_INT(op1) || OOP_CLASS(op1) == _gst_floatd_class) &&
               (IS_INT(op2) || OOP_CLASS(op2) == _gst_floatd_class)) {
      RAW_FLOATD_OP(op, op1, op2, farg1 / farg2);
    }

    PREPARE_STACK();
    EXPORT_REGS();
    if (COMMON(ARE_INTS(op1, op2))) {
      if (!VMpr_SmallInteger_divide(10, 1)) {
        IMPORT_REGS();
        NEXT_BC;
      }
    }

    VM_SEND_MESSAGE(_gst_builtin_selectors[DIVIDE_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#line 849 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(1) = _stack1;
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc10 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 873 "vm.inl"
  } while (0);
  /* REMAINDER_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define op1 _stack1
#define op2 _stack0
#define op _stack1
#line 341 "vm.def"
    PREPARE_STACK();
    EXPORT_REGS();
    if (IS_INT(op1) && IS_INT(op2) && !VMpr_SmallInteger_modulo(11, 1)) {
      IMPORT_REGS();
      NEXT_BC;
    }

    VM_SEND_MESSAGE(_gst_builtin_selectors[REMAINDER_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#line 900 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(1) = _stack1;
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc11 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 924 "vm.inl"
  } while (0);
  /* BIT_XOR_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define op1 _stack1
#define op2 _stack0
#define op _stack1
#line 356 "vm.def"
    if COMMON (ARE_INTS(op1, op2)) {
      op = tagged_xor(op1, op2);
      break;
    }

    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[BIT_XOR_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#line 950 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(1) = _stack1;
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc12 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 974 "vm.inl"
  } while (0);
  /* BIT_SHIFT_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define op1 _stack1
#define op2 _stack0
#define op _stack1
#line 370 "vm.def"
    if COMMON (IS_INT(op2) && IS_INT(op1)) {
      intptr_t iarg1, iarg2;
      iarg1 = TO_INT(op1);
      iarg2 = TO_INT(op2);
      if (iarg2 < 0) {
        if COMMON (iarg2 >= -ST_INT_SIZE)
          op = FROM_INT(iarg1 >> -iarg2);
        else
          op = FROM_INT(iarg1 >> ST_INT_SIZE);

        break;
      } else if COMMON (iarg2 < ST_INT_SIZE) {
        intptr_t result = iarg1 << iarg2;
        if COMMON ((result >> iarg2) == iarg1 && !INT_OVERFLOW(result)) {
          op = FROM_INT(result);
          break;
        }
      }
    }

    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[BIT_SHIFT_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#line 1019 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(1) = _stack1;
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc13 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1043 "vm.inl"
  } while (0);
  /* INTEGER_DIVIDE_SPECIAL ( op1 op2 | -- op1 op2 | ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define op1 _stack1
#define op2 _stack0
#line 403 "vm.def"
    PREPARE_STACK();
    EXPORT_REGS();
    if (IS_INT(op1) && IS_INT(op2) && !VMpr_SmallInteger_intDiv(12, 1)) {
      IMPORT_REGS();
      NEXT_BC;
    }

    VM_SEND_MESSAGE(_gst_builtin_selectors[INTEGER_DIVIDE_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#line 1069 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
  } while (0);
}
NEXT_BC;
bc14 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1090 "vm.inl"
  } while (0);
  /* BIT_AND_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define op1 _stack1
#define op2 _stack0
#define op _stack1
#line 418 "vm.def"
    op = tagged_and(op1, op2);
    if COMMON (IS_INT(op))
      break;

    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[BIT_AND_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#line 1114 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(1) = _stack1;
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc15 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1138 "vm.inl"
  } while (0);
  /* BIT_OR_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define op1 _stack1
#define op2 _stack0
#define op _stack1
#line 430 "vm.def"
    if COMMON (ARE_INTS(op1, op2)) {
      op = tagged_or(op1, op2);
      break;
    }

    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[BIT_OR_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#line 1164 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(1) = _stack1;
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc16 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1188 "vm.inl"
  } while (0);
  /* AT_SPECIAL ( rec idx -- val ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define rec _stack1
#define idx _stack0
#define val _stack1
#line 444 "vm.def"
    OOP classOOP;
    PREPARE_STACK();
    EXPORT_REGS();
    if UNCOMMON (IS_INT(rec)) {
      VM_SEND_MESSAGE(_gst_builtin_selectors[AT_SPECIAL].symbol, 1);
      IMPORT_REGS();
      FETCH;
    }

    if COMMON (at_cache_class == (classOOP = OOP_CLASS(rec)) &&
               !cached_index_oop_primitive(rec, idx, at_cache_spec)) {
      IMPORT_REGS();
      NEXT_BC;
    }

    /* Not the same class that is in the cache, or the primitive failed --
       send the message, and modify the cache if the send is resolved to
       a primitive.  */
    last_primitive = 0;
    VM_SEND_MESSAGE(_gst_builtin_selectors[AT_SPECIAL].symbol, 1);
    IMPORT_REGS();
    if (_gst_primitive_table[last_primitive].id == 60) {
      at_cache_spec = CLASS_INSTANCE_SPEC(classOOP);
      at_cache_class = classOOP;
      NEXT_BC;
    }
    FETCH;

#line 1233 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
#undef idx
#undef val
  } while (0);
  VM_STACK_AT(1) = _stack1;
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc17 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED,
      _stack2 ATTRIBUTE_UNUSED;
  _stack2 = VM_STACK_AT(2);
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1258 "vm.inl"
  } while (0);
  /* AT_PUT_SPECIAL ( rec idx val -- res ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define rec _stack2
#define idx _stack1
#define val _stack0
#define res _stack2
#line 477 "vm.def"
    OOP classOOP;
    PREPARE_STACK();
    EXPORT_REGS();
    if UNCOMMON (IS_INT(rec)) {
      VM_SEND_MESSAGE(_gst_builtin_selectors[AT_PUT_SPECIAL].symbol, 2);
      IMPORT_REGS();
      FETCH;
    }

    if COMMON (at_put_cache_class == (classOOP = OOP_CLASS(rec)) &&
               !cached_index_oop_put_primitive(rec, idx, val,
                                               at_put_cache_spec)) {
      IMPORT_REGS();
      NEXT_BC;
    }

    /* Not the same class that is in the cache, or the primitive failed --
       send the message, and modify the cache if the send is resolved to
       a primitive.  */
    last_primitive = 0;
    VM_SEND_MESSAGE(_gst_builtin_selectors[AT_PUT_SPECIAL].symbol, 2);
    IMPORT_REGS();
    if (_gst_primitive_table[last_primitive].id == 61) {
      at_put_cache_spec = CLASS_INSTANCE_SPEC(classOOP);
      at_put_cache_class = classOOP;
      NEXT_BC;
    }
    FETCH;

#line 1304 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
#undef idx
#undef val
#undef res
  } while (0);
  VM_STACK_AT(2) = _stack2;
  VM_POP_N_OOPS(2);
}
NEXT_BC;
bc18 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1328 "vm.inl"
  } while (0);
  /* SIZE_SPECIAL ( rec -- val ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define rec _stack0
#define val _stack0
#line 510 "vm.def"
    OOP classOOP;
    PREPARE_STACK();
    EXPORT_REGS();
    if UNCOMMON (IS_INT(rec)) {
      VM_SEND_MESSAGE(_gst_builtin_selectors[SIZE_SPECIAL].symbol, 0);
      IMPORT_REGS();
      FETCH;
    }

    if COMMON (size_cache_class == (classOOP = OOP_CLASS(rec)) &&
               !execute_primitive_operation(size_cache_prim, 0)) {
      IMPORT_REGS();
      NEXT_BC;
    }

    /* Not the same class that is in the cache, or the primitive failed --
       send the message, and modify the cache if the send is resolved to
       a primitive.  */
    last_primitive = 0;
    VM_SEND_MESSAGE(_gst_builtin_selectors[SIZE_SPECIAL].symbol, 0);
    IMPORT_REGS();
    if COMMON (last_primitive) {
      size_cache_prim = last_primitive;
      size_cache_class = classOOP;
      NEXT_BC;
    }
    FETCH;

#line 1372 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
#undef val
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc19 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1393 "vm.inl"
  } while (0);
  /* CLASS_SPECIAL ( rec -- val ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define rec _stack0
#define val _stack0
#line 543 "vm.def"
    OOP classOOP;
    PREPARE_STACK();
    EXPORT_REGS();
    if UNCOMMON (IS_INT(rec)) {
      VM_SEND_MESSAGE(_gst_builtin_selectors[CLASS_SPECIAL].symbol, 0);
      IMPORT_REGS();
      FETCH;
    }

    if COMMON (class_cache_class == (classOOP = OOP_CLASS(rec)) &&
               !execute_primitive_operation(class_cache_prim, 1)) {
      IMPORT_REGS();
      NEXT_BC;
    }

    /* Not the same class that is in the cache, or the primitive failed --
       send the message, and modify the cache if the send is resolved to
       a primitive.  */
    last_primitive = 0;
    VM_SEND_MESSAGE(_gst_builtin_selectors[CLASS_SPECIAL].symbol, 0);
    IMPORT_REGS();
    if COMMON (last_primitive) {
      class_cache_prim = last_primitive;
      class_cache_class = classOOP;
      NEXT_BC;
    }
    FETCH;

#line 1437 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
#undef val
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc20 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1458 "vm.inl"
  } while (0);
  /* IS_NIL_SPECIAL ( rec -- val ) */
  do {
#define rec _stack0
#define val _stack0
#line 576 "vm.def"
    /* DO_JUMP_LOOKAHEAD (rec == _gst_nil_oop); */
    val = rec == _gst_nil_oop ? _gst_true_oop : _gst_false_oop;

#line 1470 "vm.inl"
#undef rec
#undef val
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc21 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1489 "vm.inl"
  } while (0);
  /* NOT_NIL_SPECIAL ( rec -- val ) */
  do {
#define rec _stack0
#define val _stack0
#line 581 "vm.def"
    /* DO_JUMP_LOOKAHEAD (rec != _gst_nil_oop); */
    val = rec != _gst_nil_oop ? _gst_true_oop : _gst_false_oop;

#line 1501 "vm.inl"
#undef rec
#undef val
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc22 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1520 "vm.inl"
  } while (0);
  /* VALUE_SPECIAL ( rec | -- rec | ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define rec _stack0
#line 586 "vm.def"
    PREPARE_STACK();
    EXPORT_REGS();
    if (UNCOMMON(IS_INT(rec)) ||
        UNCOMMON(OOP_CLASS(rec) != _gst_block_closure_class) ||
        UNCOMMON(send_block_value(0, 0)))
      VM_SEND_MESSAGE(_gst_builtin_selectors[VALUE_SPECIAL].symbol, 0);

    IMPORT_REGS();
    FETCH;

#line 1542 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
  } while (0);
}
NEXT_BC;
bc23 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1562 "vm.inl"
  } while (0);
  /* VALUE_COLON_SPECIAL ( rec blk_arg | -- rec blk_arg | ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define rec _stack1
#define blk_arg _stack0
#line 598 "vm.def"
    PREPARE_STACK();
    EXPORT_REGS();
    if (UNCOMMON(IS_INT(rec)) ||
        UNCOMMON(OOP_CLASS(rec) != _gst_block_closure_class) ||
        UNCOMMON(send_block_value(1, 0)))
      VM_SEND_MESSAGE(_gst_builtin_selectors[VALUE_COLON_SPECIAL].symbol, 1);

    IMPORT_REGS();
    FETCH;

#line 1585 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
#undef blk_arg
  } while (0);
}
NEXT_BC;
bc24 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1606 "vm.inl"
  } while (0);
  /* SAME_OBJECT_SPECIAL ( op1 op2 -- op ) */
  do {
#define op1 _stack1
#define op2 _stack0
#define op _stack1
#line 610 "vm.def"
    /* DO_JUMP_LOOKAHEAD (op1 == op2); */
    op = (op1 == op2) ? _gst_true_oop : _gst_false_oop;

#line 1619 "vm.inl"
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(1) = _stack1;
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc25 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1640 "vm.inl"
  } while (0);
  /* JAVA_AS_INT_SPECIAL ( rec -- val ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define rec _stack0
#define val _stack0
#line 615 "vm.def"
    if COMMON (IS_INT(rec) || is_c_int_32(rec)) {
      val = rec;
      break;
    }

    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[JAVA_AS_INT_SPECIAL].symbol, 0);
    IMPORT_REGS();
    FETCH;

#line 1665 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
#undef val
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc26 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1686 "vm.inl"
  } while (0);
  /* JAVA_AS_LONG_SPECIAL ( rec -- val ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define rec _stack0
#define val _stack0
#line 629 "vm.def"
    if COMMON (IS_INT(rec) || is_c_int_64(rec)) {
      val = rec;
      break;
    }

    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[JAVA_AS_LONG_SPECIAL].symbol, 0);
    IMPORT_REGS();
    FETCH;

#line 1711 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
#undef val
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc27 : {
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1730 "vm.inl"
  } while (0);
  /* INVALID ( -- ) */
  do {
    int arg = arg;
#line 226 "vm.def"
    _gst_errorf("Invalid bytecode %d(%d) found!", ip[-1], arg);

#line 1740 "vm.inl"
  } while (0);
}
NEXT_BC;
bc28 : {
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1754 "vm.inl"
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg >> 8;
    int n = arg & 255;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#line 643 "vm.def"
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#line 1773 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
}
NEXT_BC;
bc29 : {
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1789 "vm.inl"
  } while (0);
  /* SEND_SUPER ( -- ) */
  do {
    int sel = arg >> 8;
    int n = arg & 255;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#line 651 "vm.def"
    OOP classOOP;
    PREPARE_STACK();
    classOOP = VM_POP_OOP();

    EXPORT_REGS();
    SEND_TO_SUPER(METHOD_LITERAL(sel), n, classOOP);
    IMPORT_REGS();
    FETCH;

#line 1811 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
}
NEXT_BC;
bc30 : {
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1827 "vm.inl"
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#line 662 "vm.def"
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#line 1846 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
}
NEXT_BC;
bc31 : {
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1862 "vm.inl"
  } while (0);
  /* SEND_SUPER_IMMEDIATE ( -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#line 671 "vm.def"
    OOP classOOP;
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    classOOP = VM_POP_OOP();

    EXPORT_REGS();
    SEND_TO_SUPER(bs->symbol, bs->numArgs, classOOP);
    IMPORT_REGS();
    FETCH;

#line 1884 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
}
NEXT_BC;
bc32 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1901 "vm.inl"
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
#line 683 "vm.def"
    tos = METHOD_TEMPORARY(n);

#line 1912 "vm.inl"
#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc33 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1929 "vm.inl"
  } while (0);
  /* PUSH_OUTER_TEMP ( -- tos ) */
  do {
    int n = arg >> 8;
    int scopes = arg & 255;
#define tos _extra1
#line 687 "vm.def"
    OOP contextOOP;
    gst_object context;

    context = OOP_TO_OBJ(_gst_this_context_oop[local_cpy_current_thread_id]);
    do {
      contextOOP = OBJ_BLOCK_CONTEXT_GET_OUTER_CONTEXT(context);
      context = OOP_TO_OBJ(contextOOP);
    } while (--scopes);

    tos = OBJ_BLOCK_CONTEXT_AT_STACK(context, n);

#line 1952 "vm.inl"
#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc34 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 1969 "vm.inl"
  } while (0);
  /* PUSH_LIT_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define tos _extra1
#line 702 "vm.def"
    tos = METHOD_LITERAL(n);
    if (UNCOMMON(IS_INT(tos)) ||
        UNCOMMON(!is_a_kind_of(OOP_CLASS(tos), _gst_association_class))) {
      PREPARE_STACK();
      VM_PUSH_OOP(tos);
      EXPORT_REGS();
      VM_SEND_MESSAGE(_gst_builtin_selectors[VALUE_SPECIAL].symbol, 0);
      IMPORT_REGS();
      FETCH;
    } else
      tos = OBJ_ASSOCIATION_GET_VALUE(OOP_TO_OBJ(tos));

#line 1996 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc35 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 2015 "vm.inl"
  } while (0);
  /* PUSH_RECEIVER_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
#line 718 "vm.def"
    tos = RECEIVER_VARIABLE(n);

#line 2026 "vm.inl"
#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc36 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 2044 "vm.inl"
  } while (0);
  /* STORE_TEMPORARY_VARIABLE ( tos | -- tos | ) */
  do {
    int n = arg;
#define tos _stack0
#line 722 "vm.def"
    STORE_METHOD_TEMPORARY(n, tos);

#line 2055 "vm.inl"
#undef tos
  } while (0);
}
NEXT_BC;
bc37 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 2072 "vm.inl"
  } while (0);
  /* STORE_OUTER_TEMP ( tos | -- tos | ) */
  do {
    int n = arg >> 8;
    int scopes = arg & 255;
#define tos _stack0
#line 726 "vm.def"
    OOP contextOOP;
    gst_object context;

    context = OOP_TO_OBJ(_gst_this_context_oop[local_cpy_current_thread_id]);
    do {
      contextOOP = OBJ_BLOCK_CONTEXT_GET_OUTER_CONTEXT(context);
      context = OOP_TO_OBJ(contextOOP);
    } while (--scopes);

    OBJ_BLOCK_CONTEXT_AT_PUT_STACK(context, n, tos);

#line 2095 "vm.inl"
#undef tos
  } while (0);
}
NEXT_BC;
bc38 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 2112 "vm.inl"
  } while (0);
  /* STORE_LIT_VARIABLE ( tos | -- tos | ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define tos _stack0
#line 741 "vm.def"
    OOP var = METHOD_LITERAL(n), value = tos;
    if (UNCOMMON(IS_INT(var)) ||
        UNCOMMON(!is_a_kind_of(OOP_CLASS(var), _gst_association_class))) {
      PREPARE_STACK();
      VM_SET_STACKTOP(var);
      VM_PUSH_OOP(value);
      EXPORT_REGS();
      VM_SEND_MESSAGE(_gst_builtin_selectors[VALUE_COLON_SPECIAL].symbol, 1);
      IMPORT_REGS();
      FETCH;
    } else {
      OBJ_ASSOCIATION_SET_VALUE(OOP_TO_OBJ(var), value);
    }
#line 2140 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef tos
  } while (0);
}
NEXT_BC;
bc39 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 2159 "vm.inl"
  } while (0);
  /* STORE_RECEIVER_VARIABLE ( tos | -- tos | ) */
  do {
    int n = arg;

#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)

#define tos _stack0
#line 758 "vm.def"
    if (COMMON (!IS_OOP_READONLY (_gst_self[local_cpy_current_thread_id]))) {
      STORE_RECEIVER_VARIABLE(n, tos);
    } else {
      PREPARE_STACK();
      VM_SET_STACKTOP(_gst_self[local_cpy_current_thread_id]);
      VM_PUSH_OOP(FROM_INT(n + 1));
      VM_PUSH_OOP(tos);
      EXPORT_REGS();
      VM_SEND_MESSAGE(_gst_write_slot_at_put_symbol, 2);
      IMPORT_REGS();
      FETCH;
    }

#line 2170 "vm.inl"

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK

#undef tos
  } while (0);
}
NEXT_BC;
bc40 : {
  /* ADVANCE ( -- ) */
  do {
#line 212 "vm.def"
    ip += 2;
    LOCAL_COUNTER++;

#line 2185 "vm.inl"
  } while (0);
  /* JUMP_BACK ( -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#line 762 "vm.def"
    PREPARE_STACK();
    ip -= n;
    FETCH;

#line 2201 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
}
NEXT_BC;
bc41 : {
  /* ADVANCE ( -- ) */
  do {
#line 212 "vm.def"
    ip += 2;
    LOCAL_COUNTER++;

#line 2217 "vm.inl"
  } while (0);
  /* JUMP ( -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#line 768 "vm.def"
    PREPARE_STACK();
    ip += n;
    FETCH;

#line 2233 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
}
NEXT_BC;
bc42 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 2251 "vm.inl"
  } while (0);
  /* POP_JUMP_TRUE ( tos -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define tos _stack0
#line 793 "vm.def"
    if UNCOMMON (tos == _gst_true_oop) {
      PREPARE_STACK();
      VM_POP_N_OOPS(1);
      ip += n;
      FETCH;
    } else if UNCOMMON (tos != _gst_false_oop) {
      ip += n;
      PREPARE_STACK();
      EXPORT_REGS();
      VM_SEND_MESSAGE(_gst_must_be_boolean_symbol, 0);
      IMPORT_REGS();
      FETCH;
    }

#line 2281 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef tos
  } while (0);
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc43 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 2301 "vm.inl"
  } while (0);
  /* POP_JUMP_FALSE ( tos -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define tos _stack0
#line 774 "vm.def"
    if UNCOMMON (tos == _gst_false_oop) {
      PREPARE_STACK();
      VM_POP_N_OOPS(1);
      ip += n;
      FETCH;
    } else if UNCOMMON (tos != _gst_true_oop) {
      ip += n;
      PREPARE_STACK();
      EXPORT_REGS();
      VM_SEND_MESSAGE(_gst_must_be_boolean_symbol, 0);
      IMPORT_REGS();
      FETCH;
    }

#line 2331 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef tos
  } while (0);
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc44 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 2350 "vm.inl"
  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
#line 812 "vm.def"
    tos = FROM_INT(n);

#line 2361 "vm.inl"
#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc45 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 2378 "vm.inl"
  } while (0);
  /* PUSH_SPECIAL ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
#line 816 "vm.def"
    tos = _gst_nil_oop + (n - NIL_INDEX);

#line 2389 "vm.inl"
#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc46 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 2406 "vm.inl"
  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
#line 820 "vm.def"
    tos = METHOD_LITERAL(n);

#line 2417 "vm.inl"
#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc47 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 2436 "vm.inl"
  } while (0);
  /* POP_INTO_NEW_STACKTOP ( obj | val -- obj | ) */
  do {
    int n = arg;
#define obj _stack1
#define val _stack0
#line 824 "vm.def"
    STORE_INSTANCE_VARIABLE(obj, n, val);

#line 2448 "vm.inl"
#undef obj
#undef val
  } while (0);
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc48 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 2467 "vm.inl"
  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0
#line 828 "vm.def"

#line 2476 "vm.inl"
#undef tos
  } while (0);
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc49 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 2494 "vm.inl"
  } while (0);
  /* MAKE_DIRTY_BLOCK ( block -- closure ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define block _stack0
#define closure _stack0
#line 831 "vm.def"
    PREPARE_STACK();
    EXPORT_REGS();
    closure = _gst_make_block_closure(block);
    IMPORT_REGS();
    UNDO_PREPARE_STACK();

#line 2513 "vm.inl"
#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef block
#undef closure
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc50 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
#line 207 "vm.def"
    PREFETCH;
    LOCAL_COUNTER++;

#line 2534 "vm.inl"
  } while (0);
  /* RETURN_METHOD_STACK_TOP ( val | -- val | ) */
  do {
#define val _stack0
#line 839 "vm.def"
    /* The current context dies here, so the stack need not be prepared.  */
    EXPORT_REGS();
    if UNCOMMON (!unwind_method()) {
      VM_SEND_MESSAGE(_gst_bad_return_error_symbol, 0);
      IMPORT_REGS();
    } else {
      IMPORT_REGS();
      VM_SET_STACKTOP(val);
    }
    FETCH;

#line 2556 "vm.inl"
#undef val
  } while (0);
}
NEXT_BC;
bc51 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* RETURN_CONTEXT_STACK_TOP ( val | -- val | ) */
  do {
#define val _stack0
    /* The current context dies here, so the stack need not be prepared.  */
    EXPORT_REGS();
    unwind_context();
    IMPORT_REGS();
    VM_SET_STACKTOP(val);
    FETCH;

#undef val
  } while (0);
}
NEXT_BC;
bc52 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* DUP_STACK_TOP ( tos | -- tos | tos2 ) */
  do {
#define tos _stack0
#define tos2 _extra1
    tos2 = tos;

#undef tos
#undef tos2
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc53 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* EXIT_INTERPRETER ( val | -- val | ) */
  do {
#define val _stack0
    /* This fixes a very rare condition, but it can happen: GC can
       happen because send_message_internal allocates a context
       while the interpreter is checking last_primitive to fill
       the special cache for #at:, #at:put: and #size.  If there
       are finalizable objects, the finalization callins might
       change last_primitive to a bogus value.  To fix the
       problem, we invalidate last_primitive every time the
       interpreter exits.  */
    last_primitive = 0;

    {
      OOP activeProcessOOP = get_scheduled_process();
      gst_object process = OOP_TO_OBJ(activeProcessOOP);
      if (IS_NIL(activeProcessOOP))
        abort();

      if (OBJ_CLASS(process) == _gst_callin_process_class)
        OBJ_CALLIN_PROCESS_SET_RETURNED_VALUE(process, val);
      _gst_terminate_process(activeProcessOOP);
      if (processOOP == activeProcessOOP)
        SET_EXCEPT_FLAG(true);
    }
    FETCH;

#undef val
  } while (0);
}
NEXT_BC;
bc54 : {
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
}
NEXT_BC;
bc55 : {
  /* EXT_BYTE ( -- ) */
  do {
    PREFETCH_VEC(normal_byte_codes);
    arg = (arg << 8) | GET_ARG;
    NEXT_BC_NO_ARG(normal_byte_codes);

  } while (0);
}
NEXT_BC;
bc56 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc57 : {
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* INVALID ( -- ) */
  do {
    int arg = arg;
    _gst_errorf("Invalid bytecode %d(%d) found!", ip[-1], arg);

  } while (0);
}
NEXT_BC;
bc58 : {
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* INVALID ( -- ) */
  do {
    int arg = arg;
    _gst_errorf("Invalid bytecode %d(%d) found!", ip[-1], arg);

  } while (0);
}
NEXT_BC;
bc59 : {
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* INVALID ( -- ) */
  do {
    int arg = arg;
    _gst_errorf("Invalid bytecode %d(%d) found!", ip[-1], arg);

  } while (0);
}
NEXT_BC;
bc60 : {
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* INVALID ( -- ) */
  do {
    int arg = arg;
    _gst_errorf("Invalid bytecode %d(%d) found!", ip[-1], arg);

  } while (0);
}
NEXT_BC;
bc61 : {
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* INVALID ( -- ) */
  do {
    int arg = arg;
    _gst_errorf("Invalid bytecode %d(%d) found!", ip[-1], arg);

  } while (0);
}
NEXT_BC;
bc62 : {
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* INVALID ( -- ) */
  do {
    int arg = arg;
    _gst_errorf("Invalid bytecode %d(%d) found!", ip[-1], arg);

  } while (0);
}
NEXT_BC;
bc63 : {
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* INVALID ( -- ) */
  do {
    int arg = arg;
    _gst_errorf("Invalid bytecode %d(%d) found!", ip[-1], arg);

  } while (0);
}
NEXT_BC;
bc64 : {
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
}
NEXT_BC;
bc65 : {
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg;
    int n = 0;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
}
NEXT_BC;
bc66 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* RETURN_CONTEXT_STACK_TOP ( val | -- val | ) */
  do {
#define val _extra1
    /* The current context dies here, so the stack need not be prepared.  */
    EXPORT_REGS();
    unwind_context();
    IMPORT_REGS();
    VM_SET_STACKTOP(val);
    FETCH;

#undef val
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc67 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc68 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc69 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc70 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* MAKE_DIRTY_BLOCK ( block -- closure ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define block _extra1
#define closure _extra1
    PREPARE_STACK();
    EXPORT_REGS();
    closure = _gst_make_block_closure(block);
    IMPORT_REGS();
    UNDO_PREPARE_STACK();

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef block
#undef closure
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc71 : {
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg;
    int n = 2;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
}
NEXT_BC;
bc72 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  /* DUP_STACK_TOP ( tos | -- tos | tos2 ) */
  do {
#define tos _stack1
#define tos2 _stack0
    tos2 = tos;

#undef tos
#undef tos2
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc73 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc74 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg;
    int n = 0;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc75 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_SPECIAL ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = _gst_nil_oop + (n - NIL_INDEX);

#undef tos
  } while (0);
  /* RETURN_CONTEXT_STACK_TOP ( val | -- val | ) */
  do {
#define val _extra1
    /* The current context dies here, so the stack need not be prepared.  */
    EXPORT_REGS();
    unwind_context();
    IMPORT_REGS();
    VM_SET_STACKTOP(val);
    FETCH;

#undef val
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc76 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc77 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_OUTER_TEMP ( -- tos ) */
  do {
    int n = arg;
    int scopes = 1;
#define tos _extra1
    OOP contextOOP;
    gst_object context;

    context = OOP_TO_OBJ(_gst_this_context_oop[local_cpy_current_thread_id]);
    do {
      contextOOP = OBJ_BLOCK_CONTEXT_GET_OUTER_CONTEXT(context);
      context = OOP_TO_OBJ(contextOOP);
    } while (--scopes);

    tos = OBJ_BLOCK_CONTEXT_AT_STACK(context, n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc78 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* STORE_TEMPORARY_VARIABLE ( tos | -- tos | ) */
  do {
    int n = arg;
#define tos _stack0
    STORE_METHOD_TEMPORARY(n, tos);

#undef tos
  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc79 : {
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra2
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
  VM_PUSH_OOP(_extra2);
}
NEXT_BC;
bc80 : {
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* INVALID ( -- ) */
  do {
    int arg = arg;
    _gst_errorf("Invalid bytecode %d(%d) found!", ip[-1], arg);

  } while (0);
}
NEXT_BC;
bc81 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = FROM_INT(n);

#undef tos
  } while (0);
  /* PLUS_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define op1 _stack0
#define op2 _extra1
#define op _stack0
    INTERP_BASIC_OP(op, op1, op2, add_with_check(op1, op2, &overflow),
                    farg1 + farg2);
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[PLUS_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc82 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_LIT_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define tos _extra1
    tos = METHOD_LITERAL(n);
    if (UNCOMMON(IS_INT(tos)) ||
        UNCOMMON(!is_a_kind_of(OOP_CLASS(tos), _gst_association_class))) {
      PREPARE_STACK();
      VM_PUSH_OOP(tos);
      EXPORT_REGS();
      VM_SEND_MESSAGE(_gst_builtin_selectors[VALUE_SPECIAL].symbol, 0);
      IMPORT_REGS();
      FETCH;
    } else
      tos = OBJ_ASSOCIATION_GET_VALUE(OOP_TO_OBJ(tos));

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc83 : {
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra2
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
  VM_PUSH_OOP(_extra2);
}
NEXT_BC;
bc84 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg >> 8;
    int n = arg & 255;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc85 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 1;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc86 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* IS_NIL_SPECIAL ( rec -- val ) */
  do {
#define rec _stack0
#define val _stack0
    /* DO_JUMP_LOOKAHEAD (rec == _gst_nil_oop); */
    val = rec == _gst_nil_oop ? _gst_true_oop : _gst_false_oop;

#undef rec
#undef val
  } while (0);
  /* POP_JUMP_FALSE ( tos -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_STACK_AT(0) = _stack0;                                                     \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define tos _stack0
    if UNCOMMON (tos == _gst_false_oop) {
      PREPARE_STACK();
      VM_POP_N_OOPS(1);
      ip += n;
      FETCH;
    } else if UNCOMMON (tos != _gst_true_oop) {
      ip += n;
      PREPARE_STACK();
      EXPORT_REGS();
      VM_SEND_MESSAGE(_gst_must_be_boolean_symbol, 0);
      IMPORT_REGS();
      FETCH;
    }

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef tos
  } while (0);
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc87 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = FROM_INT(n);

#undef tos
  } while (0);
  /* EQUAL_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define op1 _stack0
#define op2 _extra1
#define op _stack0
    PREPARE_STACK();
    INTERP_BASIC_BOOL(op, op1, op2, ==);
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[EQUAL_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc88 : {
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg;
    int n = 3;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
}
NEXT_BC;
bc89 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc90 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = 0;
    int n = 0;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc91 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* RETURN_CONTEXT_STACK_TOP ( val | -- val | ) */
  do {
#define val _extra1
    /* The current context dies here, so the stack need not be prepared.  */
    EXPORT_REGS();
    unwind_context();
    IMPORT_REGS();
    VM_SET_STACKTOP(val);
    FETCH;

#undef val
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc92 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = 36;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc93 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* SAME_OBJECT_SPECIAL ( op1 op2 -- op ) */
  do {
#define op1 _stack1
#define op2 _stack0
#define op _stack1
    /* DO_JUMP_LOOKAHEAD (op1 == op2); */
    op = (op1 == op2) ? _gst_true_oop : _gst_false_oop;

#undef op1
#undef op2
#undef op
  } while (0);
  /* POP_JUMP_FALSE ( tos -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_STACK_AT(1) = _stack1;                                                     \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define tos _stack1
    if UNCOMMON (tos == _gst_false_oop) {
      PREPARE_STACK();
      VM_POP_N_OOPS(1);
      ip += n;
      FETCH;
    } else if UNCOMMON (tos != _gst_true_oop) {
      ip += n;
      PREPARE_STACK();
      EXPORT_REGS();
      VM_SEND_MESSAGE(_gst_must_be_boolean_symbol, 0);
      IMPORT_REGS();
      FETCH;
    }

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef tos
  } while (0);
  VM_POP_N_OOPS(2);
}
NEXT_BC;
bc94 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = 1;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc95 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _stack0
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc96 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  /* DUP_STACK_TOP ( tos | -- tos | tos2 ) */
  do {
#define tos _stack1
#define tos2 _stack0
    tos2 = tos;

#undef tos
#undef tos2
  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc97 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg;
    int n = 0;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc98 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 1;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc99 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* EQUAL_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define op1 _stack0
#define op2 _extra1
#define op _stack0
    PREPARE_STACK();
    INTERP_BASIC_BOOL(op, op1, op2, ==);
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[EQUAL_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc100 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = FROM_INT(n);

#undef tos
  } while (0);
  /* MINUS_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define op1 _stack0
#define op2 _extra1
#define op _stack0
    INTERP_BASIC_OP(op, op1, op2, sub_with_check(op1, op2, &overflow),
                    farg1 - farg2);
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[MINUS_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc101 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* DUP_STACK_TOP ( tos | -- tos | tos2 ) */
  do {
#define tos _stack0
#define tos2 _extra1
    tos2 = tos;

#undef tos
#undef tos2
  } while (0);
  /* POP_JUMP_FALSE ( tos -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define tos _extra1
    if UNCOMMON (tos == _gst_false_oop) {
      PREPARE_STACK();
      VM_POP_N_OOPS(1);
      ip += n;
      FETCH;
    } else if UNCOMMON (tos != _gst_true_oop) {
      ip += n;
      PREPARE_STACK();
      EXPORT_REGS();
      VM_SEND_MESSAGE(_gst_must_be_boolean_symbol, 0);
      IMPORT_REGS();
      FETCH;
    }

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef tos
  } while (0);
}
NEXT_BC;
bc102 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc103 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = FROM_INT(n);

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = 32;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc104 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SIZE_SPECIAL ( rec -- val ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define rec _extra1
#define val _extra1
    OOP classOOP;
    PREPARE_STACK();
    EXPORT_REGS();
    if UNCOMMON (IS_INT(rec)) {
      VM_SEND_MESSAGE(_gst_builtin_selectors[SIZE_SPECIAL].symbol, 0);
      IMPORT_REGS();
      FETCH;
    }

    if COMMON (size_cache_class == (classOOP = OOP_CLASS(rec)) &&
               !execute_primitive_operation(size_cache_prim, 0)) {
      IMPORT_REGS();
      NEXT_BC;
    }

    /* Not the same class that is in the cache, or the primitive failed --
       send the message, and modify the cache if the send is resolved to
       a primitive.  */
    last_primitive = 0;
    VM_SEND_MESSAGE(_gst_builtin_selectors[SIZE_SPECIAL].symbol, 0);
    IMPORT_REGS();
    if COMMON (last_primitive) {
      size_cache_prim = last_primitive;
      size_cache_class = classOOP;
      NEXT_BC;
    }
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
#undef val
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc105 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg >> 8;
    int n = arg & 255;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc106 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 2;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc107 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc108 : {
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = 1;
#define tos _extra2
    tos = FROM_INT(n);

#undef tos
  } while (0);
  /* PLUS_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
    VM_PUSH_OOP(_extra2);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(2);                                                             \
  } while (0)
#define op1 _extra1
#define op2 _extra2
#define op _extra1
    INTERP_BASIC_OP(op, op1, op2, add_with_check(op1, op2, &overflow),
                    farg1 + farg2);
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[PLUS_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc109 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_RECEIVER_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define tos _extra1
    tos = RECEIVER_VARIABLE(n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc110 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = 38;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc111 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = FROM_INT(n);

#undef tos
  } while (0);
  /* AT_SPECIAL ( rec idx -- val ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define rec _stack0
#define idx _extra1
#define val _stack0
    OOP classOOP;
    PREPARE_STACK();
    EXPORT_REGS();
    if UNCOMMON (IS_INT(rec)) {
      VM_SEND_MESSAGE(_gst_builtin_selectors[AT_SPECIAL].symbol, 1);
      IMPORT_REGS();
      FETCH;
    }

    if COMMON (at_cache_class == (classOOP = OOP_CLASS(rec)) &&
               !cached_index_oop_primitive(rec, idx, at_cache_spec)) {
      IMPORT_REGS();
      NEXT_BC;
    }

    /* Not the same class that is in the cache, or the primitive failed --
       send the message, and modify the cache if the send is resolved to
       a primitive.  */
    last_primitive = 0;
    VM_SEND_MESSAGE(_gst_builtin_selectors[AT_SPECIAL].symbol, 1);
    IMPORT_REGS();
    if (_gst_primitive_table[last_primitive].id == 60) {
      at_cache_spec = CLASS_INSTANCE_SPEC(classOOP);
      at_cache_class = classOOP;
      NEXT_BC;
    }
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
#undef idx
#undef val
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc112 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_RECEIVER_VARIABLE ( -- tos ) */
  do {
    int n = 1;
#define tos _extra1
    tos = RECEIVER_VARIABLE(n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc113 : {
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra2
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
  VM_PUSH_OOP(_extra2);
}
NEXT_BC;
bc114 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* DUP_STACK_TOP ( tos | -- tos | tos2 ) */
  do {
#define tos _stack0
#define tos2 _extra1
    tos2 = tos;

#undef tos
#undef tos2
  } while (0);
  /* POP_JUMP_TRUE ( tos -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define tos _extra1
    if UNCOMMON (tos == _gst_true_oop) {
      PREPARE_STACK();
      VM_POP_N_OOPS(1);
      ip += n;
      FETCH;
    } else if UNCOMMON (tos != _gst_false_oop) {
      ip += n;
      PREPARE_STACK();
      EXPORT_REGS();
      VM_SEND_MESSAGE(_gst_must_be_boolean_symbol, 0);
      IMPORT_REGS();
      FETCH;
    }

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef tos
  } while (0);
}
NEXT_BC;
bc115 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* AT_SPECIAL ( rec idx -- val ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define rec _stack0
#define idx _extra1
#define val _stack0
    OOP classOOP;
    PREPARE_STACK();
    EXPORT_REGS();
    if UNCOMMON (IS_INT(rec)) {
      VM_SEND_MESSAGE(_gst_builtin_selectors[AT_SPECIAL].symbol, 1);
      IMPORT_REGS();
      FETCH;
    }

    if COMMON (at_cache_class == (classOOP = OOP_CLASS(rec)) &&
               !cached_index_oop_primitive(rec, idx, at_cache_spec)) {
      IMPORT_REGS();
      NEXT_BC;
    }

    /* Not the same class that is in the cache, or the primitive failed --
       send the message, and modify the cache if the send is resolved to
       a primitive.  */
    last_primitive = 0;
    VM_SEND_MESSAGE(_gst_builtin_selectors[AT_SPECIAL].symbol, 1);
    IMPORT_REGS();
    if (_gst_primitive_table[last_primitive].id == 60) {
      at_cache_spec = CLASS_INSTANCE_SPEC(classOOP);
      at_cache_class = classOOP;
      NEXT_BC;
    }
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
#undef idx
#undef val
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc116 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 2;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc117 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = 49;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc118 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* STORE_TEMPORARY_VARIABLE ( tos | -- tos | ) */
  do {
    int n = 1;
#define tos _stack0
    STORE_METHOD_TEMPORARY(n, tos);

#undef tos
  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc119 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 1;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc120 : {
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* INVALID ( -- ) */
  do {
    int arg = arg;
    _gst_errorf("Invalid bytecode %d(%d) found!", ip[-1], arg);

  } while (0);
}
NEXT_BC;
bc121 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* STORE_OUTER_TEMP ( tos | -- tos | ) */
  do {
    int n = arg;
    int scopes = 1;
#define tos _stack0
    OOP contextOOP;
    gst_object context;

    context = OOP_TO_OBJ(_gst_this_context_oop[local_cpy_current_thread_id]);
    do {
      contextOOP = OBJ_BLOCK_CONTEXT_GET_OUTER_CONTEXT(context);
      context = OOP_TO_OBJ(contextOOP);
    } while (--scopes);

    OBJ_BLOCK_CONTEXT_AT_PUT_STACK(context, n, tos);

#undef tos
  } while (0);
}
NEXT_BC;
bc122 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = FROM_INT(n);

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = 96;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc123 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _stack0
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc124 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_RECEIVER_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = RECEIVER_VARIABLE(n);

#undef tos
  } while (0);
  /* RETURN_CONTEXT_STACK_TOP ( val | -- val | ) */
  do {
#define val _extra1
    /* The current context dies here, so the stack need not be prepared.  */
    EXPORT_REGS();
    unwind_context();
    IMPORT_REGS();
    VM_SET_STACKTOP(val);
    FETCH;

#undef val
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc125 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 1;
#define tos _stack0
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc126 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define tos _stack0
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc127 : {
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = 0;
#define tos _extra2
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
  VM_PUSH_OOP(_extra2);
}
NEXT_BC;
bc128 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* RETURN_CONTEXT_STACK_TOP ( val | -- val | ) */
  do {
#define val _extra1
    /* The current context dies here, so the stack need not be prepared.  */
    EXPORT_REGS();
    unwind_context();
    IMPORT_REGS();
    VM_SET_STACKTOP(val);
    FETCH;

#undef val
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc129 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* SIZE_SPECIAL ( rec -- val ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define rec _extra1
#define val _extra1
    OOP classOOP;
    PREPARE_STACK();
    EXPORT_REGS();
    if UNCOMMON (IS_INT(rec)) {
      VM_SEND_MESSAGE(_gst_builtin_selectors[SIZE_SPECIAL].symbol, 0);
      IMPORT_REGS();
      FETCH;
    }

    if COMMON (size_cache_class == (classOOP = OOP_CLASS(rec)) &&
               !execute_primitive_operation(size_cache_prim, 0)) {
      IMPORT_REGS();
      NEXT_BC;
    }

    /* Not the same class that is in the cache, or the primitive failed --
       send the message, and modify the cache if the send is resolved to
       a primitive.  */
    last_primitive = 0;
    VM_SEND_MESSAGE(_gst_builtin_selectors[SIZE_SPECIAL].symbol, 0);
    IMPORT_REGS();
    if COMMON (last_primitive) {
      size_cache_prim = last_primitive;
      size_cache_class = classOOP;
      NEXT_BC;
    }
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
#undef val
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc130 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* IS_NIL_SPECIAL ( rec -- val ) */
  do {
#define rec _stack0
#define val _stack0
    /* DO_JUMP_LOOKAHEAD (rec == _gst_nil_oop); */
    val = rec == _gst_nil_oop ? _gst_true_oop : _gst_false_oop;

#undef rec
#undef val
  } while (0);
  /* POP_JUMP_TRUE ( tos -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_STACK_AT(0) = _stack0;                                                     \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define tos _stack0
    if UNCOMMON (tos == _gst_true_oop) {
      PREPARE_STACK();
      VM_POP_N_OOPS(1);
      ip += n;
      FETCH;
    } else if UNCOMMON (tos != _gst_false_oop) {
      ip += n;
      PREPARE_STACK();
      EXPORT_REGS();
      VM_SEND_MESSAGE(_gst_must_be_boolean_symbol, 0);
      IMPORT_REGS();
      FETCH;
    }

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef tos
  } while (0);
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc131 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* AT_PUT_SPECIAL ( rec idx val -- res ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define rec _stack1
#define idx _stack0
#define val _extra1
#define res _stack1
    OOP classOOP;
    PREPARE_STACK();
    EXPORT_REGS();
    if UNCOMMON (IS_INT(rec)) {
      VM_SEND_MESSAGE(_gst_builtin_selectors[AT_PUT_SPECIAL].symbol, 2);
      IMPORT_REGS();
      FETCH;
    }

    if COMMON (at_put_cache_class == (classOOP = OOP_CLASS(rec)) &&
               !cached_index_oop_put_primitive(rec, idx, val,
                                               at_put_cache_spec)) {
      IMPORT_REGS();
      NEXT_BC;
    }

    /* Not the same class that is in the cache, or the primitive failed --
       send the message, and modify the cache if the send is resolved to
       a primitive.  */
    last_primitive = 0;
    VM_SEND_MESSAGE(_gst_builtin_selectors[AT_PUT_SPECIAL].symbol, 2);
    IMPORT_REGS();
    if (_gst_primitive_table[last_primitive].id == 61) {
      at_put_cache_spec = CLASS_INSTANCE_SPEC(classOOP);
      at_put_cache_class = classOOP;
      NEXT_BC;
    }
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
#undef idx
#undef val
#undef res
  } while (0);
  VM_STACK_AT(1) = _stack1;
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc132 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_LIT_VARIABLE ( -- tos ) */
  do {
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define tos _extra1
    tos = METHOD_LITERAL(n);
    if (UNCOMMON(IS_INT(tos)) ||
        UNCOMMON(!is_a_kind_of(OOP_CLASS(tos), _gst_association_class))) {
      PREPARE_STACK();
      VM_PUSH_OOP(tos);
      EXPORT_REGS();
      VM_SEND_MESSAGE(_gst_builtin_selectors[VALUE_SPECIAL].symbol, 0);
      IMPORT_REGS();
      FETCH;
    } else
      tos = OBJ_ASSOCIATION_GET_VALUE(OOP_TO_OBJ(tos));

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc133 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* PLUS_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define op1 _stack0
#define op2 _extra1
#define op _stack0
    INTERP_BASIC_OP(op, op1, op2, add_with_check(op1, op2, &overflow),
                    farg1 + farg2);
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[PLUS_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc134 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* ADVANCE ( -- ) */
  do {
    ip += 2;
    LOCAL_COUNTER++;

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  /* JUMP_BACK ( -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    ip -= n;
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc135 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  /* PUSH_LIT_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define tos _stack0
    tos = METHOD_LITERAL(n);
    if (UNCOMMON(IS_INT(tos)) ||
        UNCOMMON(!is_a_kind_of(OOP_CLASS(tos), _gst_association_class))) {
      PREPARE_STACK();
      VM_PUSH_OOP(tos);
      EXPORT_REGS();
      VM_SEND_MESSAGE(_gst_builtin_selectors[VALUE_SPECIAL].symbol, 0);
      IMPORT_REGS();
      FETCH;
    } else
      tos = OBJ_ASSOCIATION_GET_VALUE(OOP_TO_OBJ(tos));

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef tos
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc136 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = 1;
#define tos _extra1
    tos = FROM_INT(n);

#undef tos
  } while (0);
  /* STORE_TEMPORARY_VARIABLE ( tos | -- tos | ) */
  do {
    int n = arg;
#define tos _extra1
    STORE_METHOD_TEMPORARY(n, tos);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc137 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = 2;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc138 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 3;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc139 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_OUTER_TEMP ( -- tos ) */
  do {
    int n = 0;
    int scopes = 1;
#define tos _extra1
    OOP contextOOP;
    gst_object context;

    context = OOP_TO_OBJ(_gst_this_context_oop[local_cpy_current_thread_id]);
    do {
      contextOOP = OBJ_BLOCK_CONTEXT_GET_OUTER_CONTEXT(context);
      context = OOP_TO_OBJ(contextOOP);
    } while (--scopes);

    tos = OBJ_BLOCK_CONTEXT_AT_STACK(context, n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc140 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_RECEIVER_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = RECEIVER_VARIABLE(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = 0;
    int n = 0;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc141 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = FROM_INT(n);

#undef tos
  } while (0);
  /* GREATER_THAN_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define op1 _stack0
#define op2 _extra1
#define op _stack0
    PREPARE_STACK();
    INTERP_BASIC_BOOL(op, op1, op2, >);
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[GREATER_THAN_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc142 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* VALUE_SPECIAL ( rec | -- rec | ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define rec _extra1
    PREPARE_STACK();
    EXPORT_REGS();
    if (UNCOMMON(IS_INT(rec)) ||
        UNCOMMON(OOP_CLASS(rec) != _gst_block_closure_class) ||
        UNCOMMON(send_block_value(0, 0)))
      VM_SEND_MESSAGE(_gst_builtin_selectors[VALUE_SPECIAL].symbol, 0);

    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc143 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* MINUS_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define op1 _stack0
#define op2 _extra1
#define op _stack0
    INTERP_BASIC_OP(op, op1, op2, sub_with_check(op1, op2, &overflow),
                    farg1 - farg2);
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[MINUS_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc144 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = 3;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc145 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_SPECIAL ( -- tos ) */
  do {
    int n = 0;
#define tos _extra1
    tos = _gst_nil_oop + (n - NIL_INDEX);

#undef tos
  } while (0);
  /* SAME_OBJECT_SPECIAL ( op1 op2 -- op ) */
  do {
#define op1 _stack0
#define op2 _extra1
#define op _stack0
    /* DO_JUMP_LOOKAHEAD (op1 == op2); */
    op = (op1 == op2) ? _gst_true_oop : _gst_false_oop;

#undef op1
#undef op2
#undef op
  } while (0);
  /* POP_JUMP_FALSE ( tos -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_STACK_AT(0) = _stack0;                                                     \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define tos _stack0
    if UNCOMMON (tos == _gst_false_oop) {
      PREPARE_STACK();
      VM_POP_N_OOPS(1);
      ip += n;
      FETCH;
    } else if UNCOMMON (tos != _gst_true_oop) {
      ip += n;
      PREPARE_STACK();
      EXPORT_REGS();
      VM_SEND_MESSAGE(_gst_must_be_boolean_symbol, 0);
      IMPORT_REGS();
      FETCH;
    }

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef tos
  } while (0);
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc146 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* STORE_TEMPORARY_VARIABLE ( tos | -- tos | ) */
  do {
    int n = 2;
#define tos _stack0
    STORE_METHOD_TEMPORARY(n, tos);

#undef tos
  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc147 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* SAME_OBJECT_SPECIAL ( op1 op2 -- op ) */
  do {
#define op1 _stack1
#define op2 _stack0
#define op _stack1
    /* DO_JUMP_LOOKAHEAD (op1 == op2); */
    op = (op1 == op2) ? _gst_true_oop : _gst_false_oop;

#undef op1
#undef op2
#undef op
  } while (0);
  /* POP_JUMP_TRUE ( tos -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_STACK_AT(1) = _stack1;                                                     \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define tos _stack1
    if UNCOMMON (tos == _gst_true_oop) {
      PREPARE_STACK();
      VM_POP_N_OOPS(1);
      ip += n;
      FETCH;
    } else if UNCOMMON (tos != _gst_false_oop) {
      ip += n;
      PREPARE_STACK();
      EXPORT_REGS();
      VM_SEND_MESSAGE(_gst_must_be_boolean_symbol, 0);
      IMPORT_REGS();
      FETCH;
    }

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef tos
  } while (0);
  VM_POP_N_OOPS(2);
}
NEXT_BC;
bc148 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = FROM_INT(n);

#undef tos
  } while (0);
  /* TIMES_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define op1 _stack0
#define op2 _extra1
#define op _stack0
    INTERP_BASIC_OP(op, op1, op2, mul_with_check(op1, op2, &overflow),
                    farg1 * farg2);
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[TIMES_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc149 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_RECEIVER_VARIABLE ( -- tos ) */
  do {
    int n = 2;
#define tos _extra1
    tos = RECEIVER_VARIABLE(n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc150 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = FROM_INT(n);

#undef tos
  } while (0);
  /* LESS_THAN_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define op1 _stack0
#define op2 _extra1
#define op _stack0
    PREPARE_STACK();
    INTERP_BASIC_BOOL(op, op1, op2, <);
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[LESS_THAN_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc151 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* AT_PUT_SPECIAL ( rec idx val -- res ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define rec _stack1
#define idx _stack0
#define val _extra1
#define res _stack1
    OOP classOOP;
    PREPARE_STACK();
    EXPORT_REGS();
    if UNCOMMON (IS_INT(rec)) {
      VM_SEND_MESSAGE(_gst_builtin_selectors[AT_PUT_SPECIAL].symbol, 2);
      IMPORT_REGS();
      FETCH;
    }

    if COMMON (at_put_cache_class == (classOOP = OOP_CLASS(rec)) &&
               !cached_index_oop_put_primitive(rec, idx, val,
                                               at_put_cache_spec)) {
      IMPORT_REGS();
      NEXT_BC;
    }

    /* Not the same class that is in the cache, or the primitive failed --
       send the message, and modify the cache if the send is resolved to
       a primitive.  */
    last_primitive = 0;
    VM_SEND_MESSAGE(_gst_builtin_selectors[AT_PUT_SPECIAL].symbol, 2);
    IMPORT_REGS();
    if (_gst_primitive_table[last_primitive].id == 61) {
      at_put_cache_spec = CLASS_INSTANCE_SPEC(classOOP);
      at_put_cache_class = classOOP;
      NEXT_BC;
    }
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
#undef idx
#undef val
#undef res
  } while (0);
  VM_STACK_AT(1) = _stack1;
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc152 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_OUTER_TEMP ( -- tos ) */
  do {
    int n = arg;
    int scopes = 2;
#define tos _extra1
    OOP contextOOP;
    gst_object context;

    context = OOP_TO_OBJ(_gst_this_context_oop[local_cpy_current_thread_id]);
    do {
      contextOOP = OBJ_BLOCK_CONTEXT_GET_OUTER_CONTEXT(context);
      context = OOP_TO_OBJ(contextOOP);
    } while (--scopes);

    tos = OBJ_BLOCK_CONTEXT_AT_STACK(context, n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc153 : {
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define tos _extra2
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = 0;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
    VM_PUSH_OOP(_extra2);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(2);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
  VM_PUSH_OOP(_extra2);
}
NEXT_BC;
bc154 : {
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define tos _extra2
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
    VM_PUSH_OOP(_extra2);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(2);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
  VM_PUSH_OOP(_extra2);
}
NEXT_BC;
bc155 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = 40;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc156 : {
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 3;
#define tos _extra2
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
  VM_PUSH_OOP(_extra2);
}
NEXT_BC;
bc157 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* STORE_TEMPORARY_VARIABLE ( tos | -- tos | ) */
  do {
    int n = 1;
#define tos _stack0
    STORE_METHOD_TEMPORARY(n, tos);

#undef tos
  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
}
NEXT_BC;
bc158 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = 0;
    int n = 0;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc159 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = FROM_INT(n);

#undef tos
  } while (0);
  /* BIT_AND_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define op1 _stack0
#define op2 _extra1
#define op _stack0
    op = tagged_and(op1, op2);
    if COMMON (IS_INT(op))
      break;

    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[BIT_AND_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc160 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 2;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg;
    int n = 0;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc161 : {
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 1;
#define tos _extra2
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg >> 8;
    int n = arg & 255;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
    VM_PUSH_OOP(_extra2);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(2);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
  VM_PUSH_OOP(_extra2);
}
NEXT_BC;
bc162 : {
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define tos _extra2
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
  VM_PUSH_OOP(_extra2);
}
NEXT_BC;
bc163 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_RECEIVER_VARIABLE ( -- tos ) */
  do {
    int n = 3;
#define tos _extra1
    tos = RECEIVER_VARIABLE(n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc164 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 2;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc165 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* NOT_NIL_SPECIAL ( rec -- val ) */
  do {
#define rec _stack0
#define val _stack0
    /* DO_JUMP_LOOKAHEAD (rec != _gst_nil_oop); */
    val = rec != _gst_nil_oop ? _gst_true_oop : _gst_false_oop;

#undef rec
#undef val
  } while (0);
  /* POP_JUMP_FALSE ( tos -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_STACK_AT(0) = _stack0;                                                     \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define tos _stack0
    if UNCOMMON (tos == _gst_false_oop) {
      PREPARE_STACK();
      VM_POP_N_OOPS(1);
      ip += n;
      FETCH;
    } else if UNCOMMON (tos != _gst_true_oop) {
      ip += n;
      PREPARE_STACK();
      EXPORT_REGS();
      VM_SEND_MESSAGE(_gst_must_be_boolean_symbol, 0);
      IMPORT_REGS();
      FETCH;
    }

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef tos
  } while (0);
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc166 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* STORE_TEMPORARY_VARIABLE ( tos | -- tos | ) */
  do {
    int n = 2;
#define tos _stack0
    STORE_METHOD_TEMPORARY(n, tos);

#undef tos
  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
}
NEXT_BC;
bc167 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* STORE_TEMPORARY_VARIABLE ( tos | -- tos | ) */
  do {
    int n = 3;
#define tos _stack0
    STORE_METHOD_TEMPORARY(n, tos);

#undef tos
  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc168 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = 1;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc169 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* EQUAL_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define op1 _stack0
#define op2 _extra1
#define op _stack0
    PREPARE_STACK();
    INTERP_BASIC_BOOL(op, op1, op2, ==);
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[EQUAL_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc170 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  /* DUP_STACK_TOP ( tos | -- tos | tos2 ) */
  do {
#define tos _stack1
#define tos2 _stack0
    tos2 = tos;

#undef tos
#undef tos2
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = 1;
#define tos _extra2
    tos = FROM_INT(n);

#undef tos
  } while (0);
  /* PLUS_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_STACK_AT(0) = _stack0;                                                     \
    VM_PUSH_OOP(_extra1);                                                         \
    VM_PUSH_OOP(_extra2);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(2);                                                             \
  } while (0)
#define op1 _extra1
#define op2 _extra2
#define op _extra1
    INTERP_BASIC_OP(op, op1, op2, add_with_check(op1, op2, &overflow),
                    farg1 + farg2);
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[PLUS_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(0) = _stack0;
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc171 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc172 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* STORE_TEMPORARY_VARIABLE ( tos | -- tos | ) */
  do {
    int n = 0;
#define tos _stack0
    STORE_METHOD_TEMPORARY(n, tos);

#undef tos
  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc173 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* DUP_STACK_TOP ( tos | -- tos | tos2 ) */
  do {
#define tos _stack0
#define tos2 _extra1
    tos2 = tos;

#undef tos
#undef tos2
  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc174 : {
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra2
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = 49;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
    VM_PUSH_OOP(_extra2);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(2);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
  VM_PUSH_OOP(_extra2);
}
NEXT_BC;
bc175 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  /* PUSH_RECEIVER_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _stack0
    tos = RECEIVER_VARIABLE(n);

#undef tos
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc176 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = 84;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc177 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_LIT_VARIABLE ( -- tos ) */
  do {
    int n = 2;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define tos _extra1
    tos = METHOD_LITERAL(n);
    if (UNCOMMON(IS_INT(tos)) ||
        UNCOMMON(!is_a_kind_of(OOP_CLASS(tos), _gst_association_class))) {
      PREPARE_STACK();
      VM_PUSH_OOP(tos);
      EXPORT_REGS();
      VM_SEND_MESSAGE(_gst_builtin_selectors[VALUE_SPECIAL].symbol, 0);
      IMPORT_REGS();
      FETCH;
    } else
      tos = OBJ_ASSOCIATION_GET_VALUE(OOP_TO_OBJ(tos));

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc178 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* MAKE_DIRTY_BLOCK ( block -- closure ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define block _extra1
#define closure _extra1
    PREPARE_STACK();
    EXPORT_REGS();
    closure = _gst_make_block_closure(block);
    IMPORT_REGS();
    UNDO_PREPARE_STACK();

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef block
#undef closure
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = 3;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc179 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = 0;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc180 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* DUP_STACK_TOP ( tos | -- tos | tos2 ) */
  do {
#define tos _stack0
#define tos2 _extra1
    tos2 = tos;

#undef tos
#undef tos2
  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra2
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = 36;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
    VM_PUSH_OOP(_extra2);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(2);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
  VM_PUSH_OOP(_extra2);
}
NEXT_BC;
bc181 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_OUTER_TEMP ( -- tos ) */
  do {
    int n = 1;
    int scopes = 1;
#define tos _extra1
    OOP contextOOP;
    gst_object context;

    context = OOP_TO_OBJ(_gst_this_context_oop[local_cpy_current_thread_id]);
    do {
      contextOOP = OBJ_BLOCK_CONTEXT_GET_OUTER_CONTEXT(context);
      context = OOP_TO_OBJ(contextOOP);
    } while (--scopes);

    tos = OBJ_BLOCK_CONTEXT_AT_STACK(context, n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc182 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = FROM_INT(n);

#undef tos
  } while (0);
  /* INTEGER_DIVIDE_SPECIAL ( op1 op2 | -- op1 op2 | ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define op1 _stack0
#define op2 _extra1
    PREPARE_STACK();
    EXPORT_REGS();
    if (IS_INT(op1) && IS_INT(op2) && !VMpr_SmallInteger_intDiv(12, 1)) {
      IMPORT_REGS();
      NEXT_BC;
    }

    VM_SEND_MESSAGE(_gst_builtin_selectors[INTEGER_DIVIDE_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc183 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = 1;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* MAKE_DIRTY_BLOCK ( block -- closure ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define block _extra1
#define closure _extra1
    PREPARE_STACK();
    EXPORT_REGS();
    closure = _gst_make_block_closure(block);
    IMPORT_REGS();
    UNDO_PREPARE_STACK();

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef block
#undef closure
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc184 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 3;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc185 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_SPECIAL ( -- tos ) */
  do {
    int n = 0;
#define tos _extra1
    tos = _gst_nil_oop + (n - NIL_INDEX);

#undef tos
  } while (0);
  /* RETURN_CONTEXT_STACK_TOP ( val | -- val | ) */
  do {
#define val _extra1
    /* The current context dies here, so the stack need not be prepared.  */
    EXPORT_REGS();
    unwind_context();
    IMPORT_REGS();
    VM_SET_STACKTOP(val);
    FETCH;

#undef val
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc186 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_RECEIVER_VARIABLE ( -- tos ) */
  do {
    int n = 5;
#define tos _extra1
    tos = RECEIVER_VARIABLE(n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc187 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* MAKE_DIRTY_BLOCK ( block -- closure ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define block _extra1
#define closure _extra1
    PREPARE_STACK();
    EXPORT_REGS();
    closure = _gst_make_block_closure(block);
    IMPORT_REGS();
    UNDO_PREPARE_STACK();

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef block
#undef closure
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = 2;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc188 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* VALUE_COLON_SPECIAL ( rec blk_arg | -- rec blk_arg | ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define rec _stack0
#define blk_arg _extra1
    PREPARE_STACK();
    EXPORT_REGS();
    if (UNCOMMON(IS_INT(rec)) ||
        UNCOMMON(OOP_CLASS(rec) != _gst_block_closure_class) ||
        UNCOMMON(send_block_value(1, 0)))
      VM_SEND_MESSAGE(_gst_builtin_selectors[VALUE_COLON_SPECIAL].symbol, 1);

    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
#undef blk_arg
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc189 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = FROM_INT(n);

#undef tos
  } while (0);
  /* RETURN_CONTEXT_STACK_TOP ( val | -- val | ) */
  do {
#define val _extra1
    /* The current context dies here, so the stack need not be prepared.  */
    EXPORT_REGS();
    unwind_context();
    IMPORT_REGS();
    VM_SET_STACKTOP(val);
    FETCH;

#undef val
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc190 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg;
    int n = 2;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc191 : {
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = 1;
#define tos _extra2
    tos = FROM_INT(n);

#undef tos
  } while (0);
  /* MINUS_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
    VM_PUSH_OOP(_extra2);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(2);                                                             \
  } while (0)
#define op1 _extra1
#define op2 _extra2
#define op _extra1
    INTERP_BASIC_OP(op, op1, op2, sub_with_check(op1, op2, &overflow),
                    farg1 - farg2);
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[MINUS_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc192 : {
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra2
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
  VM_PUSH_OOP(_extra2);
}
NEXT_BC;
bc193 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_RECEIVER_VARIABLE ( -- tos ) */
  do {
    int n = 4;
#define tos _extra1
    tos = RECEIVER_VARIABLE(n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc194 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_OUTER_TEMP ( -- tos ) */
  do {
    int n = 0;
    int scopes = 1;
#define tos _extra1
    OOP contextOOP;
    gst_object context;

    context = OOP_TO_OBJ(_gst_this_context_oop[local_cpy_current_thread_id]);
    do {
      contextOOP = OBJ_BLOCK_CONTEXT_GET_OUTER_CONTEXT(context);
      context = OOP_TO_OBJ(contextOOP);
    } while (--scopes);

    tos = OBJ_BLOCK_CONTEXT_AT_STACK(context, n);

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc195 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = 1;
    int n = 0;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc196 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_OUTER_TEMP ( -- tos ) */
  do {
    int n = 0;
    int scopes = 1;
#define tos _extra1
    OOP contextOOP;
    gst_object context;

    context = OOP_TO_OBJ(_gst_this_context_oop[local_cpy_current_thread_id]);
    do {
      contextOOP = OBJ_BLOCK_CONTEXT_GET_OUTER_CONTEXT(context);
      context = OOP_TO_OBJ(contextOOP);
    } while (--scopes);

    tos = OBJ_BLOCK_CONTEXT_AT_STACK(context, n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc197 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 4;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc198 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = FROM_INT(n);

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = 41;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc199 : {
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg;
    int n = 4;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
}
NEXT_BC;
bc200 : {
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 2;
#define tos _extra2
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
  VM_PUSH_OOP(_extra2);
}
NEXT_BC;
bc201 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* CLASS_SPECIAL ( rec -- val ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define rec _extra1
#define val _extra1
    OOP classOOP;
    PREPARE_STACK();
    EXPORT_REGS();
    if UNCOMMON (IS_INT(rec)) {
      VM_SEND_MESSAGE(_gst_builtin_selectors[CLASS_SPECIAL].symbol, 0);
      IMPORT_REGS();
      FETCH;
    }

    if COMMON (class_cache_class == (classOOP = OOP_CLASS(rec)) &&
               !execute_primitive_operation(class_cache_prim, 1)) {
      IMPORT_REGS();
      NEXT_BC;
    }

    /* Not the same class that is in the cache, or the primitive failed --
       send the message, and modify the cache if the send is resolved to
       a primitive.  */
    last_primitive = 0;
    VM_SEND_MESSAGE(_gst_builtin_selectors[CLASS_SPECIAL].symbol, 0);
    IMPORT_REGS();
    if COMMON (last_primitive) {
      class_cache_prim = last_primitive;
      class_cache_class = classOOP;
      NEXT_BC;
    }
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
#undef val
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc202 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 1;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg >> 8;
    int n = arg & 255;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc203 : {
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 1;
#define tos _extra2
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
    VM_PUSH_OOP(_extra2);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(2);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
  VM_PUSH_OOP(_extra2);
}
NEXT_BC;
bc204 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = 4;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc205 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = FROM_INT(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = 0;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc206 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_RECEIVER_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = RECEIVER_VARIABLE(n);

#undef tos
  } while (0);
  /* SIZE_SPECIAL ( rec -- val ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define rec _extra1
#define val _extra1
    OOP classOOP;
    PREPARE_STACK();
    EXPORT_REGS();
    if UNCOMMON (IS_INT(rec)) {
      VM_SEND_MESSAGE(_gst_builtin_selectors[SIZE_SPECIAL].symbol, 0);
      IMPORT_REGS();
      FETCH;
    }

    if COMMON (size_cache_class == (classOOP = OOP_CLASS(rec)) &&
               !execute_primitive_operation(size_cache_prim, 0)) {
      IMPORT_REGS();
      NEXT_BC;
    }

    /* Not the same class that is in the cache, or the primitive failed --
       send the message, and modify the cache if the send is resolved to
       a primitive.  */
    last_primitive = 0;
    VM_SEND_MESSAGE(_gst_builtin_selectors[SIZE_SPECIAL].symbol, 0);
    IMPORT_REGS();
    if COMMON (last_primitive) {
      size_cache_prim = last_primitive;
      size_cache_class = classOOP;
      NEXT_BC;
    }
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
#undef val
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc207 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 1;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg;
    int n = 2;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc208 : {
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 1;
#define tos _extra2
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg;
    int n = 2;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
    VM_PUSH_OOP(_extra2);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(2);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
  VM_PUSH_OOP(_extra2);
}
NEXT_BC;
bc209 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* POP_INTO_NEW_STACKTOP ( obj | val -- obj | ) */
  do {
    int n = 0;
#define obj _stack0
#define val _extra1
    STORE_INSTANCE_VARIABLE(obj, n, val);

#undef obj
#undef val
  } while (0);
}
NEXT_BC;
bc210 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* MAKE_DIRTY_BLOCK ( block -- closure ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define block _extra1
#define closure _extra1
    PREPARE_STACK();
    EXPORT_REGS();
    closure = _gst_make_block_closure(block);
    IMPORT_REGS();
    UNDO_PREPARE_STACK();

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef block
#undef closure
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = 5;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc211 : {
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* SEND_SUPER ( -- ) */
  do {
    int sel = arg;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
    OOP classOOP;
    PREPARE_STACK();
    classOOP = VM_POP_OOP();

    EXPORT_REGS();
    SEND_TO_SUPER(METHOD_LITERAL(sel), n, classOOP);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
}
NEXT_BC;
bc212 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* MAKE_DIRTY_BLOCK ( block -- closure ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define block _extra1
#define closure _extra1
    PREPARE_STACK();
    EXPORT_REGS();
    closure = _gst_make_block_closure(block);
    IMPORT_REGS();
    UNDO_PREPARE_STACK();

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef block
#undef closure
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = 4;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc213 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_RECEIVER_VARIABLE ( -- tos ) */
  do {
    int n = 1;
#define tos _extra1
    tos = RECEIVER_VARIABLE(n);

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc214 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* STORE_OUTER_TEMP ( tos | -- tos | ) */
  do {
    int n = arg;
    int scopes = 1;
#define tos _stack0
    OOP contextOOP;
    gst_object context;

    context = OOP_TO_OBJ(_gst_this_context_oop[local_cpy_current_thread_id]);
    do {
      contextOOP = OBJ_BLOCK_CONTEXT_GET_OUTER_CONTEXT(context);
      context = OOP_TO_OBJ(contextOOP);
    } while (--scopes);

    OBJ_BLOCK_CONTEXT_AT_PUT_STACK(context, n, tos);

#undef tos
  } while (0);
  /* RETURN_CONTEXT_STACK_TOP ( val | -- val | ) */
  do {
#define val _stack0
    /* The current context dies here, so the stack need not be prepared.  */
    EXPORT_REGS();
    unwind_context();
    IMPORT_REGS();
    VM_SET_STACKTOP(val);
    FETCH;

#undef val
  } while (0);
}
NEXT_BC;
bc215 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = 37;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc216 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* CLASS_SPECIAL ( rec -- val ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define rec _extra1
#define val _extra1
    OOP classOOP;
    PREPARE_STACK();
    EXPORT_REGS();
    if UNCOMMON (IS_INT(rec)) {
      VM_SEND_MESSAGE(_gst_builtin_selectors[CLASS_SPECIAL].symbol, 0);
      IMPORT_REGS();
      FETCH;
    }

    if COMMON (class_cache_class == (classOOP = OOP_CLASS(rec)) &&
               !execute_primitive_operation(class_cache_prim, 1)) {
      IMPORT_REGS();
      NEXT_BC;
    }

    /* Not the same class that is in the cache, or the primitive failed --
       send the message, and modify the cache if the send is resolved to
       a primitive.  */
    last_primitive = 0;
    VM_SEND_MESSAGE(_gst_builtin_selectors[CLASS_SPECIAL].symbol, 0);
    IMPORT_REGS();
    if COMMON (last_primitive) {
      class_cache_prim = last_primitive;
      class_cache_class = classOOP;
      NEXT_BC;
    }
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
#undef val
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc217 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 1;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg;
    int n = 0;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc218 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = 130;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc219 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_RECEIVER_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define tos _extra1
    tos = RECEIVER_VARIABLE(n);

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc220 : {
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* PUSH_LIT_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define tos _extra2
    tos = METHOD_LITERAL(n);
    if (UNCOMMON(IS_INT(tos)) ||
        UNCOMMON(!is_a_kind_of(OOP_CLASS(tos), _gst_association_class))) {
      PREPARE_STACK();
      VM_PUSH_OOP(tos);
      EXPORT_REGS();
      VM_SEND_MESSAGE(_gst_builtin_selectors[VALUE_SPECIAL].symbol, 0);
      IMPORT_REGS();
      FETCH;
    } else
      tos = OBJ_ASSOCIATION_GET_VALUE(OOP_TO_OBJ(tos));

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
  VM_PUSH_OOP(_extra2);
}
NEXT_BC;
bc221 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* STORE_TEMPORARY_VARIABLE ( tos | -- tos | ) */
  do {
    int n = 0;
#define tos _stack0
    STORE_METHOD_TEMPORARY(n, tos);

#undef tos
  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
}
NEXT_BC;
bc222 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_RECEIVER_VARIABLE ( -- tos ) */
  do {
    int n = 2;
#define tos _extra1
    tos = RECEIVER_VARIABLE(n);

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc223 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = 2;
    int n = 0;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc224 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 2;
#define tos _stack0
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc225 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* MAKE_DIRTY_BLOCK ( block -- closure ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define block _extra1
#define closure _extra1
    PREPARE_STACK();
    EXPORT_REGS();
    closure = _gst_make_block_closure(block);
    IMPORT_REGS();
    UNDO_PREPARE_STACK();

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef block
#undef closure
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = 6;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc226 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_SPECIAL ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = _gst_nil_oop + (n - NIL_INDEX);

#undef tos
  } while (0);
  /* RETURN_METHOD_STACK_TOP ( val | -- val | ) */
  do {
#define val _extra1
    /* The current context dies here, so the stack need not be prepared.  */
    EXPORT_REGS();
    if UNCOMMON (!unwind_method()) {
      VM_SEND_MESSAGE(_gst_bad_return_error_symbol, 0);
      IMPORT_REGS();
    } else {
      IMPORT_REGS();
      VM_SET_STACKTOP(val);
    }
    FETCH;

#undef val
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc227 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = FROM_INT(n);

#undef tos
  } while (0);
  /* GREATER_EQUAL_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define op1 _stack0
#define op2 _extra1
#define op _stack0
    PREPARE_STACK();
    INTERP_BASIC_BOOL(op, op1, op2, >=);
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[GREATER_EQUAL_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc228 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  /* PUSH_RECEIVER_VARIABLE ( -- tos ) */
  do {
    int n = 1;
#define tos _stack0
    tos = RECEIVER_VARIABLE(n);

#undef tos
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc229 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_LIT_VARIABLE ( -- tos ) */
  do {
    int n = 3;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
#define tos _extra1
    tos = METHOD_LITERAL(n);
    if (UNCOMMON(IS_INT(tos)) ||
        UNCOMMON(!is_a_kind_of(OOP_CLASS(tos), _gst_association_class))) {
      PREPARE_STACK();
      VM_PUSH_OOP(tos);
      EXPORT_REGS();
      VM_SEND_MESSAGE(_gst_builtin_selectors[VALUE_SPECIAL].symbol, 0);
      IMPORT_REGS();
      FETCH;
    } else
      tos = OBJ_ASSOCIATION_GET_VALUE(OOP_TO_OBJ(tos));

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc230 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = 2;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc231 : {
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* SEND_SUPER ( -- ) */
  do {
    int sel = arg;
    int n = 0;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
    OOP classOOP;
    PREPARE_STACK();
    classOOP = VM_POP_OOP();

    EXPORT_REGS();
    SEND_TO_SUPER(METHOD_LITERAL(sel), n, classOOP);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
}
NEXT_BC;
bc232 : {
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* INVALID ( -- ) */
  do {
    int arg = arg;
    _gst_errorf("Invalid bytecode %d(%d) found!", ip[-1], arg);

  } while (0);
}
NEXT_BC;
bc233 : {
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra2
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = 0;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
    VM_PUSH_OOP(_extra2);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(2);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
  VM_PUSH_OOP(_extra2);
}
NEXT_BC;
bc234 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define tos _stack0
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* RETURN_CONTEXT_STACK_TOP ( val | -- val | ) */
  do {
#define val _stack0
    /* The current context dies here, so the stack need not be prepared.  */
    EXPORT_REGS();
    unwind_context();
    IMPORT_REGS();
    VM_SET_STACKTOP(val);
    FETCH;

#undef val
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc235 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* SAME_OBJECT_SPECIAL ( op1 op2 -- op ) */
  do {
#define op1 _stack0
#define op2 _extra1
#define op _stack0
    /* DO_JUMP_LOOKAHEAD (op1 == op2); */
    op = (op1 == op2) ? _gst_true_oop : _gst_false_oop;

#undef op1
#undef op2
#undef op
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc236 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* MAKE_DIRTY_BLOCK ( block -- closure ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define block _extra1
#define closure _extra1
    PREPARE_STACK();
    EXPORT_REGS();
    closure = _gst_make_block_closure(block);
    IMPORT_REGS();
    UNDO_PREPARE_STACK();

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef block
#undef closure
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = 1;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc237 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 3;
#define tos _stack0
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc238 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  /* DUP_STACK_TOP ( tos | -- tos | tos2 ) */
  do {
#define tos _stack1
#define tos2 _stack0
    tos2 = tos;

#undef tos
#undef tos2
  } while (0);
  /* SEND_IMMEDIATE ( -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_STACK_AT(0) = _stack0;                                                     \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
  } while (0)
    const struct builtin_selector *bs = &_gst_builtin_selectors[n];
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(bs->symbol, bs->numArgs);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc239 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define tos _extra2
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* AT_PUT_SPECIAL ( rec idx val -- res ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
    VM_PUSH_OOP(_extra2);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(2);                                                             \
  } while (0)
#define rec _stack0
#define idx _extra1
#define val _extra2
#define res _stack0
    OOP classOOP;
    PREPARE_STACK();
    EXPORT_REGS();
    if UNCOMMON (IS_INT(rec)) {
      VM_SEND_MESSAGE(_gst_builtin_selectors[AT_PUT_SPECIAL].symbol, 2);
      IMPORT_REGS();
      FETCH;
    }

    if COMMON (at_put_cache_class == (classOOP = OOP_CLASS(rec)) &&
               !cached_index_oop_put_primitive(rec, idx, val,
                                               at_put_cache_spec)) {
      IMPORT_REGS();
      NEXT_BC;
    }

    /* Not the same class that is in the cache, or the primitive failed --
       send the message, and modify the cache if the send is resolved to
       a primitive.  */
    last_primitive = 0;
    VM_SEND_MESSAGE(_gst_builtin_selectors[AT_PUT_SPECIAL].symbol, 2);
    IMPORT_REGS();
    if (_gst_primitive_table[last_primitive].id == 61) {
      at_put_cache_spec = CLASS_INSTANCE_SPEC(classOOP);
      at_put_cache_class = classOOP;
      NEXT_BC;
    }
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
#undef idx
#undef val
#undef res
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc240 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED,
      _extra3 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* DUP_STACK_TOP ( tos | -- tos | tos2 ) */
  do {
#define tos _stack0
#define tos2 _extra1
    tos2 = tos;

#undef tos
#undef tos2
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra2
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = 1;
#define tos _extra3
    tos = FROM_INT(n);

#undef tos
  } while (0);
  /* PLUS_SPECIAL ( op1 op2 -- op ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
    VM_PUSH_OOP(_extra2);                                                         \
    VM_PUSH_OOP(_extra3);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(3);                                                             \
  } while (0)
#define op1 _extra2
#define op2 _extra3
#define op _extra2
    INTERP_BASIC_OP(op, op1, op2, add_with_check(op1, op2, &overflow),
                    farg1 + farg2);
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(_gst_builtin_selectors[PLUS_SPECIAL].symbol, 1);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef op1
#undef op2
#undef op
  } while (0);
  VM_PUSH_OOP(_extra1);
  VM_PUSH_OOP(_extra2);
}
NEXT_BC;
bc241 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 4;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc242 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_LIT_VARIABLE ( -- tos ) */
  do {
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define tos _stack0
    tos = METHOD_LITERAL(n);
    if (UNCOMMON(IS_INT(tos)) ||
        UNCOMMON(!is_a_kind_of(OOP_CLASS(tos), _gst_association_class))) {
      PREPARE_STACK();
      VM_PUSH_OOP(tos);
      EXPORT_REGS();
      VM_SEND_MESSAGE(_gst_builtin_selectors[VALUE_SPECIAL].symbol, 0);
      IMPORT_REGS();
      FETCH;
    } else
      tos = OBJ_ASSOCIATION_GET_VALUE(OOP_TO_OBJ(tos));

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef tos
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc243 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* DUP_STACK_TOP ( tos | -- tos | tos2 ) */
  do {
#define tos _stack0
#define tos2 _extra1
    tos2 = tos;

#undef tos
#undef tos2
  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra2
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = 1;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
    VM_PUSH_OOP(_extra2);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(2);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
  VM_PUSH_OOP(_extra2);
}
NEXT_BC;
bc244 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* POP_INTO_NEW_STACKTOP ( obj | val -- obj | ) */
  do {
    int n = 1;
#define obj _stack1
#define val _stack0
    STORE_INSTANCE_VARIABLE(obj, n, val);

#undef obj
#undef val
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg;
    int n = 1;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc245 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* POP_STACK_TOP ( tos -- ) */
  do {
#define tos _stack0

#undef tos
  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 1;
#define tos _stack0
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* RETURN_CONTEXT_STACK_TOP ( val | -- val | ) */
  do {
#define val _stack0
    /* The current context dies here, so the stack need not be prepared.  */
    EXPORT_REGS();
    unwind_context();
    IMPORT_REGS();
    VM_SET_STACKTOP(val);
    FETCH;

#undef val
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc246 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* STORE_TEMPORARY_VARIABLE ( tos | -- tos | ) */
  do {
    int n = 3;
#define tos _stack0
    STORE_METHOD_TEMPORARY(n, tos);

#undef tos
  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
}
NEXT_BC;
bc247 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* DUP_STACK_TOP ( tos | -- tos | tos2 ) */
  do {
#define tos _stack0
#define tos2 _extra1
    tos2 = tos;

#undef tos
#undef tos2
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = arg;
    int n = 0;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc248 : {
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* INVALID ( -- ) */
  do {
    int arg = arg;
    _gst_errorf("Invalid bytecode %d(%d) found!", ip[-1], arg);

  } while (0);
}
NEXT_BC;
bc249 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_SELF ( -- tos ) */
  do {
#define tos _extra1
    tos = _gst_self[local_cpy_current_thread_id];

#undef tos
  } while (0);
  /* SEND ( -- ) */
  do {
    int sel = 3;
    int n = 0;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
    PREPARE_STACK();
    EXPORT_REGS();
    VM_SEND_MESSAGE(METHOD_LITERAL(sel), n);
    IMPORT_REGS();
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc250 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* NOT_NIL_SPECIAL ( rec -- val ) */
  do {
#define rec _stack0
#define val _stack0
    /* DO_JUMP_LOOKAHEAD (rec != _gst_nil_oop); */
    val = rec != _gst_nil_oop ? _gst_true_oop : _gst_false_oop;

#undef rec
#undef val
  } while (0);
  /* DUP_STACK_TOP ( tos | -- tos | tos2 ) */
  do {
#define tos _stack0
#define tos2 _extra1
    tos2 = tos;

#undef tos
#undef tos2
  } while (0);
  /* POP_JUMP_FALSE ( tos -- ) */
  do {
    int n = arg;
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_STACK_AT(0) = _stack0;                                                     \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define tos _extra1
    if UNCOMMON (tos == _gst_false_oop) {
      PREPARE_STACK();
      VM_POP_N_OOPS(1);
      ip += n;
      FETCH;
    } else if UNCOMMON (tos != _gst_true_oop) {
      ip += n;
      PREPARE_STACK();
      EXPORT_REGS();
      VM_SEND_MESSAGE(_gst_must_be_boolean_symbol, 0);
      IMPORT_REGS();
      FETCH;
    }

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef tos
  } while (0);
  VM_STACK_AT(0) = _stack0;
}
NEXT_BC;
bc251 : {
  OOP _stack0 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED, _extra2 ATTRIBUTE_UNUSED;
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* DUP_STACK_TOP ( tos | -- tos | tos2 ) */
  do {
#define tos _stack0
#define tos2 _extra1
    tos2 = tos;

#undef tos
#undef tos2
  } while (0);
  /* PUSH_LIT_CONSTANT ( -- tos ) */
  do {
    int n = arg;
#define tos _extra2
    tos = METHOD_LITERAL(n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
  VM_PUSH_OOP(_extra2);
}
NEXT_BC;
bc252 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = 0;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* RETURN_CONTEXT_STACK_TOP ( val | -- val | ) */
  do {
#define val _extra1
    /* The current context dies here, so the stack need not be prepared.  */
    EXPORT_REGS();
    unwind_context();
    IMPORT_REGS();
    VM_SET_STACKTOP(val);
    FETCH;

#undef val
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc253 : {
  OOP _stack0 ATTRIBUTE_UNUSED, _stack1 ATTRIBUTE_UNUSED;
  OOP _extra1 ATTRIBUTE_UNUSED;
  _stack1 = VM_STACK_AT(1);
  _stack0 = VM_STACK_AT(0);
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_INTEGER ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = FROM_INT(n);

#undef tos
  } while (0);
  /* AT_PUT_SPECIAL ( rec idx val -- res ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define rec _stack1
#define idx _stack0
#define val _extra1
#define res _stack1
    OOP classOOP;
    PREPARE_STACK();
    EXPORT_REGS();
    if UNCOMMON (IS_INT(rec)) {
      VM_SEND_MESSAGE(_gst_builtin_selectors[AT_PUT_SPECIAL].symbol, 2);
      IMPORT_REGS();
      FETCH;
    }

    if COMMON (at_put_cache_class == (classOOP = OOP_CLASS(rec)) &&
               !cached_index_oop_put_primitive(rec, idx, val,
                                               at_put_cache_spec)) {
      IMPORT_REGS();
      NEXT_BC;
    }

    /* Not the same class that is in the cache, or the primitive failed --
       send the message, and modify the cache if the send is resolved to
       a primitive.  */
    last_primitive = 0;
    VM_SEND_MESSAGE(_gst_builtin_selectors[AT_PUT_SPECIAL].symbol, 2);
    IMPORT_REGS();
    if (_gst_primitive_table[last_primitive].id == 61) {
      at_put_cache_spec = CLASS_INSTANCE_SPEC(classOOP);
      at_put_cache_class = classOOP;
      NEXT_BC;
    }
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
#undef idx
#undef val
#undef res
  } while (0);
  VM_STACK_AT(1) = _stack1;
  VM_POP_N_OOPS(1);
}
NEXT_BC;
bc254 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* PUSH_TEMPORARY_VARIABLE ( -- tos ) */
  do {
    int n = arg;
#define tos _extra1
    tos = METHOD_TEMPORARY(n);

#undef tos
  } while (0);
  /* CLASS_SPECIAL ( rec -- val ) */
  do {
#define PREPARE_STACK()                                                        \
  do {                                                                         \
    VM_PUSH_OOP(_extra1);                                                         \
  } while (0)
#define UNDO_PREPARE_STACK()                                                   \
  do {                                                                         \
    VM_POP_N_OOPS(1);                                                             \
  } while (0)
#define rec _extra1
#define val _extra1
    OOP classOOP;
    PREPARE_STACK();
    EXPORT_REGS();
    if UNCOMMON (IS_INT(rec)) {
      VM_SEND_MESSAGE(_gst_builtin_selectors[CLASS_SPECIAL].symbol, 0);
      IMPORT_REGS();
      FETCH;
    }

    if COMMON (class_cache_class == (classOOP = OOP_CLASS(rec)) &&
               !execute_primitive_operation(class_cache_prim, 1)) {
      IMPORT_REGS();
      NEXT_BC;
    }

    /* Not the same class that is in the cache, or the primitive failed --
       send the message, and modify the cache if the send is resolved to
       a primitive.  */
    last_primitive = 0;
    VM_SEND_MESSAGE(_gst_builtin_selectors[CLASS_SPECIAL].symbol, 0);
    IMPORT_REGS();
    if COMMON (last_primitive) {
      class_cache_prim = last_primitive;
      class_cache_class = classOOP;
      NEXT_BC;
    }
    FETCH;

#undef PREPARE_STACK
#undef UNDO_PREPARE_STACK
#undef rec
#undef val
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
bc255 : {
  OOP _extra1 ATTRIBUTE_UNUSED;
  /* PREFETCH ( -- ) */
  do {
    PREFETCH;
    LOCAL_COUNTER++;

  } while (0);
  /* LINE_NUMBER_BYTECODE ( -- ) */
  do {

  } while (0);
  /* PUSH_OUTER_TEMP ( -- tos ) */
  do {
    int n = 2;
    int scopes = 1;
#define tos _extra1
    OOP contextOOP;
    gst_object context;

    context = OOP_TO_OBJ(_gst_this_context_oop[local_cpy_current_thread_id]);
    do {
      contextOOP = OBJ_BLOCK_CONTEXT_GET_OUTER_CONTEXT(context);
      context = OOP_TO_OBJ(contextOOP);
    } while (--scopes);

    tos = OBJ_BLOCK_CONTEXT_AT_STACK(context, n);

#undef tos
  } while (0);
  VM_PUSH_OOP(_extra1);
}
NEXT_BC;
jump_around:;
